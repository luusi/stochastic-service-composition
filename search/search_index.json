{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Stochastic Service Composition Implementation of stochastic service composition. Paper: Brafman, R. I., De Giacomo, G., Mecella, M., & Sardina, S. (2017, November). Service Composition in Stochastic Settings. In Conference of the Italian Association for Artificial Intelligence (pp. 159-171). Springer, Cham. Preliminaries Set up the virtual environment. First, install Pipenv . Then: pipenv install --dev Install the Python package in development mode: pip install -e . # alternatively: # python setup.py develop To use rendering functionalities, you will also need to install Graphviz. At this page you will find the releases for all the supported platform. Notebooks To run the notebooks, activate the virtual environment. Then: jupyter-notebook Then via the browser go to examples/notebooks to open the notebooks. Tests To run tests: tox To run only the code tests: tox -e py3.7 To run only the linters: - tox -e flake8 - tox -e mypy - tox -e black-check - tox -e isort-check Please look at the tox.ini file for the full list of supported commands. Docs To build the docs: mkdocs build To view documentation in a browser: mkdocs serve and then go to http://localhost:8000 License stochastic_service_composition is released under the MIT license. Copyright 2021 Luciana Silo","title":"Home"},{"location":"#stochastic-service-composition","text":"Implementation of stochastic service composition. Paper: Brafman, R. I., De Giacomo, G., Mecella, M., & Sardina, S. (2017, November). Service Composition in Stochastic Settings. In Conference of the Italian Association for Artificial Intelligence (pp. 159-171). Springer, Cham.","title":"Stochastic Service Composition"},{"location":"#preliminaries","text":"Set up the virtual environment. First, install Pipenv . Then: pipenv install --dev Install the Python package in development mode: pip install -e . # alternatively: # python setup.py develop To use rendering functionalities, you will also need to install Graphviz. At this page you will find the releases for all the supported platform.","title":"Preliminaries"},{"location":"#notebooks","text":"To run the notebooks, activate the virtual environment. Then: jupyter-notebook Then via the browser go to examples/notebooks to open the notebooks.","title":"Notebooks"},{"location":"#tests","text":"To run tests: tox To run only the code tests: tox -e py3.7 To run only the linters: - tox -e flake8 - tox -e mypy - tox -e black-check - tox -e isort-check Please look at the tox.ini file for the full list of supported commands.","title":"Tests"},{"location":"#docs","text":"To build the docs: mkdocs build To view documentation in a browser: mkdocs serve and then go to http://localhost:8000","title":"Docs"},{"location":"#license","text":"stochastic_service_composition is released under the MIT license. Copyright 2021 Luciana Silo","title":"License"},{"location":"notebooks/01-services/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Services A service is a deterministic finite automaton. Follow some examples on how to build services using the library APIs. We took the examples from: De Giacomo, G., Mecella, M., & Patrizi, F. (2014). Automated service composition based on behaviors: The roman model. In Web services foundations (pp. 189-214). Springer, New York, NY. Examples from docs.notebooks.utils import render_service from stochastic_service_composition.services import Service , build_service_from_transitions , build_system_service def bathroom_heating_device () -> Service : \"\"\"Build the bathroom heating device.\"\"\" transitions = { \"air_cold\" : { \"cold_air_on\" : \"air_cold\" , \"air_off\" : \"air_off\" , }, \"air_off\" : { \"cold_air_on\" : \"air_cold\" , \"hot_air_on\" : \"air_hot\" , }, \"air_hot\" : { \"hot_air_on\" : \"air_hot\" , \"air_off\" : \"air_off\" }, } final_states = { \"air_off\" } initial_state = \"air_off\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def bathtub_device () -> Service : \"\"\"Build the bathtub device.\"\"\" transitions = { \"empty\" : { \"fill_up_buthub\" : \"filled\" , }, \"filled\" : { \"empty_buthub\" : \"empty\" }, } final_states = { \"empty\" } initial_state = \"empty\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def door_device () -> Service : \"\"\"Build the door device.\"\"\" transitions = { \"unique\" : { \"open\" : \"unique\" , \"close\" : \"unique\" , }, } final_states = { \"unique\" } initial_state = \"unique\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def kitchen_exhaust_fan_device () -> Service : \"\"\"Build the kitchen exhaust fan device.\"\"\" transitions = { \"unique\" : { \"vent_kitchen\" : \"unique\" , }, } final_states = { \"unique\" } initial_state = \"unique\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def user_behaviour () -> Service : \"\"\"Build the user behaviour.\"\"\" transitions = { \"s0\" : { \"move_to_bedroom\" : \"s0\" , \"move_to_bathroom\" : \"s1\" , \"move_to_kitchen\" : \"s3\" , }, \"s1\" : { \"move_to_bathroom\" : \"s1\" , \"wash\" : \"s2\" , }, \"s2\" : { \"move_to_bedroom\" : \"s0\" , }, \"s3\" : { \"move_to_kitchen\" : \"s3\" , \"cook_eggs\" : \"s0\" , \"prepare_tea\" : \"s0\" , }, } final_states = { \"s0\" } initial_state = \"s0\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore bathroom_heating_service = bathroom_heating_device () bathtub_service = bathtub_device () door_service = door_device () kitchen_exhaust_fan_service = kitchen_exhaust_fan_device () user_behaviour = user_behaviour () The bathroom heating device: render_service ( bathroom_heating_service ) The bathtub device: render_service ( bathtub_service ) The door device: render_service ( door_service ) The Kitchen exhaust fan device: render_service ( kitchen_exhaust_fan_service ) The user behaviour: render_service ( user_behaviour ) System service In this section, we show the computation of the system service , i.e. the build_system_service between the services. Product between bathroom heating and door devices system_service = build_system_service ( bathroom_heating_service , door_service ) render_service ( system_service ) Product between bathroom heating and bathtub devices system_service = build_system_service ( bathroom_heating_service , bathtub_service ) render_service ( system_service ) Product between all the services system_service = build_system_service ( bathroom_heating_service , bathtub_service , door_service , kitchen_exhaust_fan_service ) print ( f \"Number of states: { len ( system_service . states ) } \" ) print ( f \"Number of actions: { len ( system_service . actions ) } \" ) print ( f \"Number of final states: { len ( system_service . final_states ) } \" ) render_service ( system_service ) Number of states: 6 Number of actions: 8 Number of final states: 1","title":"Service"},{"location":"notebooks/01-services/#services","text":"A service is a deterministic finite automaton. Follow some examples on how to build services using the library APIs. We took the examples from: De Giacomo, G., Mecella, M., & Patrizi, F. (2014). Automated service composition based on behaviors: The roman model. In Web services foundations (pp. 189-214). Springer, New York, NY.","title":"Services"},{"location":"notebooks/01-services/#examples","text":"from docs.notebooks.utils import render_service from stochastic_service_composition.services import Service , build_service_from_transitions , build_system_service def bathroom_heating_device () -> Service : \"\"\"Build the bathroom heating device.\"\"\" transitions = { \"air_cold\" : { \"cold_air_on\" : \"air_cold\" , \"air_off\" : \"air_off\" , }, \"air_off\" : { \"cold_air_on\" : \"air_cold\" , \"hot_air_on\" : \"air_hot\" , }, \"air_hot\" : { \"hot_air_on\" : \"air_hot\" , \"air_off\" : \"air_off\" }, } final_states = { \"air_off\" } initial_state = \"air_off\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def bathtub_device () -> Service : \"\"\"Build the bathtub device.\"\"\" transitions = { \"empty\" : { \"fill_up_buthub\" : \"filled\" , }, \"filled\" : { \"empty_buthub\" : \"empty\" }, } final_states = { \"empty\" } initial_state = \"empty\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def door_device () -> Service : \"\"\"Build the door device.\"\"\" transitions = { \"unique\" : { \"open\" : \"unique\" , \"close\" : \"unique\" , }, } final_states = { \"unique\" } initial_state = \"unique\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def kitchen_exhaust_fan_device () -> Service : \"\"\"Build the kitchen exhaust fan device.\"\"\" transitions = { \"unique\" : { \"vent_kitchen\" : \"unique\" , }, } final_states = { \"unique\" } initial_state = \"unique\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def user_behaviour () -> Service : \"\"\"Build the user behaviour.\"\"\" transitions = { \"s0\" : { \"move_to_bedroom\" : \"s0\" , \"move_to_bathroom\" : \"s1\" , \"move_to_kitchen\" : \"s3\" , }, \"s1\" : { \"move_to_bathroom\" : \"s1\" , \"wash\" : \"s2\" , }, \"s2\" : { \"move_to_bedroom\" : \"s0\" , }, \"s3\" : { \"move_to_kitchen\" : \"s3\" , \"cook_eggs\" : \"s0\" , \"prepare_tea\" : \"s0\" , }, } final_states = { \"s0\" } initial_state = \"s0\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore bathroom_heating_service = bathroom_heating_device () bathtub_service = bathtub_device () door_service = door_device () kitchen_exhaust_fan_service = kitchen_exhaust_fan_device () user_behaviour = user_behaviour () The bathroom heating device: render_service ( bathroom_heating_service ) The bathtub device: render_service ( bathtub_service ) The door device: render_service ( door_service ) The Kitchen exhaust fan device: render_service ( kitchen_exhaust_fan_service ) The user behaviour: render_service ( user_behaviour )","title":"Examples"},{"location":"notebooks/01-services/#system-service","text":"In this section, we show the computation of the system service , i.e. the build_system_service between the services.","title":"System service"},{"location":"notebooks/01-services/#product-between-bathroom-heating-and-door-devices","text":"system_service = build_system_service ( bathroom_heating_service , door_service ) render_service ( system_service )","title":"Product between bathroom heating and door devices"},{"location":"notebooks/01-services/#product-between-bathroom-heating-and-bathtub-devices","text":"system_service = build_system_service ( bathroom_heating_service , bathtub_service ) render_service ( system_service )","title":"Product between bathroom heating and bathtub devices"},{"location":"notebooks/01-services/#product-between-all-the-services","text":"system_service = build_system_service ( bathroom_heating_service , bathtub_service , door_service , kitchen_exhaust_fan_service ) print ( f \"Number of states: { len ( system_service . states ) } \" ) print ( f \"Number of actions: { len ( system_service . actions ) } \" ) print ( f \"Number of final states: { len ( system_service . final_states ) } \" ) render_service ( system_service ) Number of states: 6 Number of actions: 8 Number of final states: 1","title":"Product between all the services"},{"location":"notebooks/02-target/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Target We are interested in the service composition problem in which the target service is stochastic. Brafman, R. I., De Giacomo, G., Mecella, M., & Sardina, S. (2017, November). Service Composition in Stochastic Settings. In Conference of the Italian Association for Artificial Intelligence (pp. 159-171). Springer, Cham. Examples from docs.notebooks.utils import render_target , render_service from stochastic_service_composition.target import build_target_from_transitions def target_service (): \"\"\"Build the target service.\"\"\" transition_function = { \"t0\" : { \"hot_air_on\" : ( \"t1\" , 0.6 , 5 ), \"move_to_kitchen\" : ( \"t8\" , 0.2 , 3 ), \"open_door_kitchen\" : ( \"t7\" , 0.2 , 2 ), }, \"t1\" : { \"fill_up_bathtub\" : ( \"t2\" , 0.7 , 4 ), \"hot_air_on\" : ( \"t1\" , 0.3 , 2 )}, \"t2\" : { \"move_to_bathroom\" : ( \"t3\" , 0.5 , 3 ), \"open_door_bathroom\" : ( \"t2\" , 0.5 , 2 ), }, \"t3\" : { \"move_to_bathroom\" : ( \"t3\" , 0.2 , 4 ), \"wash\" : ( \"t4\" , 0.8 , 8 )}, \"t4\" : { \"move_to_bedroom\" : ( \"t5\" , 1.0 , 10 )}, \"t5\" : { \"empty_bathtub\" : ( \"t6\" , 0.9 , 7 ), \"move_to_bedroom\" : ( \"t5\" , 0.1 , 3 )}, \"t6\" : { \"air_off\" : ( \"t7\" , 1.0 , 10 )}, \"t7\" : { \"move_to_kitchen\" : ( \"t8\" , 0.5 , 5 ), \"open_door_kitchen\" : ( \"t7\" , 0.5 , 4 )}, \"t8\" : { \"cook_eggs\" : ( \"t9\" , 0.6 , 7 ), \"move_to_kitchen\" : ( \"t8\" , 0.2 , 5 ), \"prepare_tea\" : ( \"t0\" , 0.2 , 2 ), }, \"t9\" : { \"no_op\" : ( \"t0\" , 0.8 , 1 ), \"vent_kitchen\" : ( \"t9\" , 0.2 , 1 )}, } initial_state = \"t0\" final_states = { \"t0\" } return build_target_from_transitions ( transition_function , initial_state , final_states ) target = target_service () Only visualize the graph: render_service ( target ) Visualize the policy and the rewards: render_target ( target )","title":"Target"},{"location":"notebooks/02-target/#target","text":"We are interested in the service composition problem in which the target service is stochastic. Brafman, R. I., De Giacomo, G., Mecella, M., & Sardina, S. (2017, November). Service Composition in Stochastic Settings. In Conference of the Italian Association for Artificial Intelligence (pp. 159-171). Springer, Cham.","title":"Target"},{"location":"notebooks/02-target/#examples","text":"from docs.notebooks.utils import render_target , render_service from stochastic_service_composition.target import build_target_from_transitions def target_service (): \"\"\"Build the target service.\"\"\" transition_function = { \"t0\" : { \"hot_air_on\" : ( \"t1\" , 0.6 , 5 ), \"move_to_kitchen\" : ( \"t8\" , 0.2 , 3 ), \"open_door_kitchen\" : ( \"t7\" , 0.2 , 2 ), }, \"t1\" : { \"fill_up_bathtub\" : ( \"t2\" , 0.7 , 4 ), \"hot_air_on\" : ( \"t1\" , 0.3 , 2 )}, \"t2\" : { \"move_to_bathroom\" : ( \"t3\" , 0.5 , 3 ), \"open_door_bathroom\" : ( \"t2\" , 0.5 , 2 ), }, \"t3\" : { \"move_to_bathroom\" : ( \"t3\" , 0.2 , 4 ), \"wash\" : ( \"t4\" , 0.8 , 8 )}, \"t4\" : { \"move_to_bedroom\" : ( \"t5\" , 1.0 , 10 )}, \"t5\" : { \"empty_bathtub\" : ( \"t6\" , 0.9 , 7 ), \"move_to_bedroom\" : ( \"t5\" , 0.1 , 3 )}, \"t6\" : { \"air_off\" : ( \"t7\" , 1.0 , 10 )}, \"t7\" : { \"move_to_kitchen\" : ( \"t8\" , 0.5 , 5 ), \"open_door_kitchen\" : ( \"t7\" , 0.5 , 4 )}, \"t8\" : { \"cook_eggs\" : ( \"t9\" , 0.6 , 7 ), \"move_to_kitchen\" : ( \"t8\" , 0.2 , 5 ), \"prepare_tea\" : ( \"t0\" , 0.2 , 2 ), }, \"t9\" : { \"no_op\" : ( \"t0\" , 0.8 , 1 ), \"vent_kitchen\" : ( \"t9\" , 0.2 , 1 )}, } initial_state = \"t0\" final_states = { \"t0\" } return build_target_from_transitions ( transition_function , initial_state , final_states ) target = target_service () Only visualize the graph: render_service ( target ) Visualize the policy and the rewards: render_target ( target )","title":"Examples"},{"location":"notebooks/03-composition-mdp/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Composition MDP In this section, we will build the example described in: De Giacomo, G., Mecella, M., & Patrizi, F. (2014). Automated service composition based on behaviors: The roman model. In Web services foundations (pp. 189-214). Springer, New York, NY. from mdp_dp_rl.algorithms.dp.dp_analytic import DPAnalytic from docs.notebooks.utils import render_target , render_service , render_composition_mdp , print_policy_data , \\ print_value_function , print_q_value_function from stochastic_service_composition.composition import composition_mdp from stochastic_service_composition.services import build_system_service , build_service_from_transitions from stochastic_service_composition.target import build_target_from_transitions , Target Target target_service = build_target_from_transitions ( { \"t0\" : { \"hot_air_on\" : ( \"t1\" , 0.6 , 5 ), \"move_to_kitchen\" : ( \"t8\" , 0.2 , 3 ), \"open_door_kitchen\" : ( \"t7\" , 0.2 , 2 ), }, \"t1\" : { \"fill_up_bathtub\" : ( \"t2\" , 0.7 , 4 ), \"hot_air_on\" : ( \"t1\" , 0.3 , 2 )}, \"t2\" : { \"move_to_bathroom\" : ( \"t3\" , 0.5 , 3 ), \"open_door_bathroom\" : ( \"t2\" , 0.5 , 2 ), }, \"t3\" : { \"move_to_bathroom\" : ( \"t3\" , 0.2 , 4 ), \"wash\" : ( \"t4\" , 0.8 , 8 )}, \"t4\" : { \"move_to_bedroom\" : ( \"t5\" , 1.0 , 10 )}, \"t5\" : { \"empty_bathtub\" : ( \"t6\" , 0.9 , 7 ), \"move_to_bedroom\" : ( \"t5\" , 0.1 , 3 )}, \"t6\" : { \"air_off\" : ( \"t7\" , 1.0 , 10 )}, \"t7\" : { \"move_to_kitchen\" : ( \"t8\" , 0.5 , 5 ), \"open_door_kitchen\" : ( \"t7\" , 0.5 , 4 )}, \"t8\" : { \"cook_eggs\" : ( \"t9\" , 0.6 , 7 ), \"move_to_kitchen\" : ( \"t8\" , 0.2 , 5 ), \"prepare_tea\" : ( \"t0\" , 0.2 , 2 ), }, \"t9\" : { \"no_op\" : ( \"t0\" , 0.8 , 1 ), \"vent_kitchen\" : ( \"t9\" , 0.2 , 1 )}, }, \"t0\" , { \"t0\" }, ) render_target ( target_service ) Service community bathroom_heating_device = build_service_from_transitions ( { \"air_cold\" : { \"cold_air_on\" : \"air_cold\" , \"air_off\" : \"air_off\" , }, \"air_off\" : { \"cold_air_on\" : \"air_cold\" , \"hot_air_on\" : \"air_hot\" , }, \"air_hot\" : { \"hot_air_on\" : \"air_hot\" , \"air_off\" : \"air_off\" }, }, \"air_off\" , { \"air_off\" }, ) bathtub_device = build_service_from_transitions ( { \"empty\" : { \"fill_up_bathtub\" : \"filled\" , }, \"filled\" : { \"empty_bathtub\" : \"empty\" }, }, \"empty\" , { \"empty\" }, ) kitchen_door_device = build_service_from_transitions ( { \"unique\" : { \"open_door_kitchen\" : \"unique\" , \"close_door_kitchen\" : \"unique\" , }, }, \"unique\" , { \"unique\" } ) bathroom_door_device = build_service_from_transitions ( { \"unique\" : { \"open_door_bathroom\" : \"unique\" , \"close_door_bathroom\" : \"unique\" , }, }, \"unique\" , { \"unique\" }, ) kitchen_exhaust_fan_device = build_service_from_transitions ( { \"unique\" : { \"vent_kitchen\" : \"unique\" , }, }, \"unique\" , { \"unique\" } ) user_behaviour = build_service_from_transitions ( { \"s0\" : { \"move_to_bedroom\" : \"s0\" , \"move_to_bathroom\" : \"s1\" , \"move_to_kitchen\" : \"s3\" , }, \"s1\" : { \"move_to_bathroom\" : \"s1\" , \"wash\" : \"s2\" , }, \"s2\" : { \"move_to_bedroom\" : \"s0\" , }, \"s3\" : { \"move_to_kitchen\" : \"s3\" , \"cook_eggs\" : \"s0\" , \"prepare_tea\" : \"s0\" , }, }, \"s0\" , { \"s0\" } ) all_services = [ bathroom_heating_device , bathtub_device , kitchen_door_device , bathroom_door_device , kitchen_exhaust_fan_device , user_behaviour ] system_service = build_system_service ( * all_services ) render_service ( system_service ) Compute the composition MDP mdp = composition_mdp ( target_service , * all_services ) render_composition_mdp ( mdp ) print ( f \"Number of states: { len ( mdp . all_states ) } \" ) print ( \"Transitions:\" ) for state , transitions in mdp . transitions . items (): for action , next_states in transitions . items (): for next_state , prob in next_states . items (): print ( state , action , next_state , prob ) Number of states: 21 Transitions: 0 initial (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on') 0.6 0 initial (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 0.2 0 initial (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on') 0 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub') 0.7 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on') 0 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on') 0.3 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 0.6 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen') 2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 0.5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen') 2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 0.5 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub') 1 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom') 0.5 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub') 1 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom') 0.5 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on') 0 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub') 0.7 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on') 0 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on') 0.3 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op') 0.8 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 0.6 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on') 0.6 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 0.6 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 0.5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 0.5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom') 0.2 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash') 0.8 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom') 3 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom') 0.5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom') 3 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom') 0.5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op') undefined (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op') 1.0 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen') 4 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op') 0.8 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen') 4 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen') 0.2 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom') 0.2 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash') 0.8 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom') 1.0 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub') 0.9 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom') 0.1 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub') 1 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off') 1.0 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub') 0.9 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom') 0.1 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off') 0 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 0.5 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off') 0 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 0.5 The optimal policy is: opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub'), Action=1 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on'), Action=0 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off'), Action=0 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom'), Action=5 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom'), Action=3 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub'), Action=1 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom'), Action=5 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom'), Action=5 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash'), Action=5 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on'), Action=0 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen'), Action=2 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen'), Action=2 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op'), Action=undefined State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen'), Action=4 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea'), Action=5 Value function: State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub'), value=39.48668545931089 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on'), value=36.817276492282 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off'), value=27.50030849781904 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom'), value=41.37261556137997 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom'), value=37.48668545931089 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub'), value=31.750277648037137 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom'), value=31.557939444956126 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom'), value=42.37261556137997 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash'), value=42.702145500460524 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom'), value=38.55793944495613 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on'), value=39.817276492282005 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen'), value=15.389265941778826 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen'), value=19.500308497819038 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen'), value=17.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen'), value=21.500308497819038 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op'), value=0.0 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen'), value=1.2195121951219512 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs'), value=7.219512195121951 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen'), value=17.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea'), value=29.781452704959896 Q-value function: State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub'): Action=1, Value=39.48668545931089 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on'): Action=0, Value=36.817276492282005 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off'): Action=0, Value=27.50030849781904 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom'): Action=5, Value=41.37261556137997 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom'): Action=3, Value=37.48668545931089 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub'): Action=1, Value=31.750277648037137 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom'): Action=5, Value=31.557939444956137 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom'): Action=5, Value=42.37261556137997 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash'): Action=5, Value=42.702145500460524 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom'): Action=5, Value=38.55793944495613 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on'): Action=0, Value=39.817276492282005 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen'): Action=5, Value=15.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen'): Action=2, Value=19.50030849781904 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen'): Action=5, Value=17.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen'): Action=2, Value=21.50030849781904 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op'): Action=undefined, Value=0.0 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen'): Action=4, Value=1.2195121951219512 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs'): Action=5, Value=7.219512195121951 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen'): Action=5, Value=17.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea'): Action=5, Value=29.781452704959896","title":"Composition MDP"},{"location":"notebooks/03-composition-mdp/#composition-mdp","text":"In this section, we will build the example described in: De Giacomo, G., Mecella, M., & Patrizi, F. (2014). Automated service composition based on behaviors: The roman model. In Web services foundations (pp. 189-214). Springer, New York, NY. from mdp_dp_rl.algorithms.dp.dp_analytic import DPAnalytic from docs.notebooks.utils import render_target , render_service , render_composition_mdp , print_policy_data , \\ print_value_function , print_q_value_function from stochastic_service_composition.composition import composition_mdp from stochastic_service_composition.services import build_system_service , build_service_from_transitions from stochastic_service_composition.target import build_target_from_transitions , Target","title":"Composition MDP"},{"location":"notebooks/03-composition-mdp/#target","text":"target_service = build_target_from_transitions ( { \"t0\" : { \"hot_air_on\" : ( \"t1\" , 0.6 , 5 ), \"move_to_kitchen\" : ( \"t8\" , 0.2 , 3 ), \"open_door_kitchen\" : ( \"t7\" , 0.2 , 2 ), }, \"t1\" : { \"fill_up_bathtub\" : ( \"t2\" , 0.7 , 4 ), \"hot_air_on\" : ( \"t1\" , 0.3 , 2 )}, \"t2\" : { \"move_to_bathroom\" : ( \"t3\" , 0.5 , 3 ), \"open_door_bathroom\" : ( \"t2\" , 0.5 , 2 ), }, \"t3\" : { \"move_to_bathroom\" : ( \"t3\" , 0.2 , 4 ), \"wash\" : ( \"t4\" , 0.8 , 8 )}, \"t4\" : { \"move_to_bedroom\" : ( \"t5\" , 1.0 , 10 )}, \"t5\" : { \"empty_bathtub\" : ( \"t6\" , 0.9 , 7 ), \"move_to_bedroom\" : ( \"t5\" , 0.1 , 3 )}, \"t6\" : { \"air_off\" : ( \"t7\" , 1.0 , 10 )}, \"t7\" : { \"move_to_kitchen\" : ( \"t8\" , 0.5 , 5 ), \"open_door_kitchen\" : ( \"t7\" , 0.5 , 4 )}, \"t8\" : { \"cook_eggs\" : ( \"t9\" , 0.6 , 7 ), \"move_to_kitchen\" : ( \"t8\" , 0.2 , 5 ), \"prepare_tea\" : ( \"t0\" , 0.2 , 2 ), }, \"t9\" : { \"no_op\" : ( \"t0\" , 0.8 , 1 ), \"vent_kitchen\" : ( \"t9\" , 0.2 , 1 )}, }, \"t0\" , { \"t0\" }, ) render_target ( target_service )","title":"Target"},{"location":"notebooks/03-composition-mdp/#service-community","text":"bathroom_heating_device = build_service_from_transitions ( { \"air_cold\" : { \"cold_air_on\" : \"air_cold\" , \"air_off\" : \"air_off\" , }, \"air_off\" : { \"cold_air_on\" : \"air_cold\" , \"hot_air_on\" : \"air_hot\" , }, \"air_hot\" : { \"hot_air_on\" : \"air_hot\" , \"air_off\" : \"air_off\" }, }, \"air_off\" , { \"air_off\" }, ) bathtub_device = build_service_from_transitions ( { \"empty\" : { \"fill_up_bathtub\" : \"filled\" , }, \"filled\" : { \"empty_bathtub\" : \"empty\" }, }, \"empty\" , { \"empty\" }, ) kitchen_door_device = build_service_from_transitions ( { \"unique\" : { \"open_door_kitchen\" : \"unique\" , \"close_door_kitchen\" : \"unique\" , }, }, \"unique\" , { \"unique\" } ) bathroom_door_device = build_service_from_transitions ( { \"unique\" : { \"open_door_bathroom\" : \"unique\" , \"close_door_bathroom\" : \"unique\" , }, }, \"unique\" , { \"unique\" }, ) kitchen_exhaust_fan_device = build_service_from_transitions ( { \"unique\" : { \"vent_kitchen\" : \"unique\" , }, }, \"unique\" , { \"unique\" } ) user_behaviour = build_service_from_transitions ( { \"s0\" : { \"move_to_bedroom\" : \"s0\" , \"move_to_bathroom\" : \"s1\" , \"move_to_kitchen\" : \"s3\" , }, \"s1\" : { \"move_to_bathroom\" : \"s1\" , \"wash\" : \"s2\" , }, \"s2\" : { \"move_to_bedroom\" : \"s0\" , }, \"s3\" : { \"move_to_kitchen\" : \"s3\" , \"cook_eggs\" : \"s0\" , \"prepare_tea\" : \"s0\" , }, }, \"s0\" , { \"s0\" } ) all_services = [ bathroom_heating_device , bathtub_device , kitchen_door_device , bathroom_door_device , kitchen_exhaust_fan_device , user_behaviour ] system_service = build_system_service ( * all_services ) render_service ( system_service )","title":"Service community"},{"location":"notebooks/03-composition-mdp/#compute-the-composition-mdp","text":"mdp = composition_mdp ( target_service , * all_services ) render_composition_mdp ( mdp ) print ( f \"Number of states: { len ( mdp . all_states ) } \" ) print ( \"Transitions:\" ) for state , transitions in mdp . transitions . items (): for action , next_states in transitions . items (): for next_state , prob in next_states . items (): print ( state , action , next_state , prob ) Number of states: 21 Transitions: 0 initial (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on') 0.6 0 initial (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 0.2 0 initial (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on') 0 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub') 0.7 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on') 0 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on') 0.3 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 0.6 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen') 2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 0.5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen') 2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 0.5 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub') 1 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom') 0.5 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub') 1 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom') 0.5 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on') 0 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub') 0.7 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on') 0 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on') 0.3 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op') 0.8 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 0.6 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on') 0.6 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs') 0.6 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea') 0.2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 0.5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 2 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 0.5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom') 0.2 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash') 0.8 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom') 3 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom') 0.5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom') 3 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom') 0.5 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op') undefined (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op') 1.0 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen') 4 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op') 0.8 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen') 4 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen') 0.2 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom') 0.2 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash') 0.8 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom') 1.0 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub') 0.9 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom') 0.1 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub') 1 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off') 1.0 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub') 0.9 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom') 5 (('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom') 0.1 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off') 0 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen') 0.5 (('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off') 0 (('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen') 0.5 The optimal policy is: opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub'), Action=1 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on'), Action=0 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off'), Action=0 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom'), Action=5 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom'), Action=3 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub'), Action=1 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom'), Action=5 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom'), Action=5 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash'), Action=5 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on'), Action=0 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen'), Action=2 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen'), Action=2 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op'), Action=undefined State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen'), Action=4 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen'), Action=5 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea'), Action=5 Value function: State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub'), value=39.48668545931089 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on'), value=36.817276492282 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off'), value=27.50030849781904 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom'), value=41.37261556137997 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom'), value=37.48668545931089 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub'), value=31.750277648037137 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom'), value=31.557939444956126 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom'), value=42.37261556137997 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash'), value=42.702145500460524 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom'), value=38.55793944495613 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on'), value=39.817276492282005 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen'), value=15.389265941778826 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen'), value=19.500308497819038 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen'), value=17.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen'), value=21.500308497819038 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op'), value=0.0 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen'), value=1.2195121951219512 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs'), value=7.219512195121951 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen'), value=17.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea'), value=29.781452704959896 Q-value function: State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'fill_up_bathtub'): Action=1, Value=39.48668545931089 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't1', 'hot_air_on'): Action=0, Value=36.817276492282005 State=(('air_hot', 'empty', 'unique', 'unique', 'unique', 's0'), 't6', 'air_off'): Action=0, Value=27.50030849781904 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'move_to_bathroom'): Action=5, Value=41.37261556137997 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't2', 'open_door_bathroom'): Action=3, Value=37.48668545931089 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'empty_bathtub'): Action=1, Value=31.750277648037137 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's0'), 't5', 'move_to_bedroom'): Action=5, Value=31.557939444956137 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'move_to_bathroom'): Action=5, Value=42.37261556137997 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's1'), 't3', 'wash'): Action=5, Value=42.702145500460524 State=(('air_hot', 'filled', 'unique', 'unique', 'unique', 's2'), 't4', 'move_to_bedroom'): Action=5, Value=38.55793944495613 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'hot_air_on'): Action=0, Value=39.817276492282005 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'move_to_kitchen'): Action=5, Value=15.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't0', 'open_door_kitchen'): Action=2, Value=19.50030849781904 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'move_to_kitchen'): Action=5, Value=17.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't7', 'open_door_kitchen'): Action=2, Value=21.50030849781904 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'no_op'): Action=undefined, Value=0.0 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's0'), 't9', 'vent_kitchen'): Action=4, Value=1.2195121951219512 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'cook_eggs'): Action=5, Value=7.219512195121951 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'move_to_kitchen'): Action=5, Value=17.389265941778824 State=(('air_off', 'empty', 'unique', 'unique', 'unique', 's3'), 't8', 'prepare_tea'): Action=5, Value=29.781452704959896","title":"Compute the composition MDP"},{"location":"notebooks/04-use-cases/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Use cases In this notebook, we describe different use cases for applying stochastic service composition. # Python imports, put at the top for simplicity from mdp_dp_rl.algorithms.dp.dp_analytic import DPAnalytic from docs.notebooks.utils import render_service , render_target , render_composition_mdp , print_policy_data , print_value_function , print_q_value_function from stochastic_service_composition.composition import composition_mdp from stochastic_service_composition.services import build_service_from_transitions from stochastic_service_composition.target import build_target_from_transitions Simple service composition: Website This simple example, showed in De Giacomo, G., Mecella, M., & Patrizi, F. (2014). Automated service composition based on behaviors: The roman model. In Web services foundations (pp. 189-214). Springer, New York, NY. consists of a simple website in which the user wants to login, choose the country, stock, and logout (c). We then have the login service (a) and the form service (b). The orchestrator (d) has to assign the action to the right service. This case is quite trivial as there is no competition among services since they always support different actions. The reward, in our case, is given whenever the user is able to complete the entire sequence of actions, right after the logout Let us define the service community: login_service = build_service_from_transitions ( { \"s0\" : { \"login\" : \"s1\" }, \"s1\" : { \"logout\" : \"s0\" } }, \"s0\" , { \"s0\" } ) form_service = build_service_from_transitions ( { \"s0\" : { \"country\" : \"s1\" }, \"s1\" : { \"currency\" : \"s0\" , \"stock\" : \"s0\" } }, \"s0\" , { \"s0\" } ) The login service: render_service ( login_service ) The form service: render_service ( form_service ) Now we define the target service: target = build_target_from_transitions ( { \"s0\" : { \"login\" : ( \"s1\" , 1.0 , 0.0 )}, \"s1\" : { \"country\" : ( \"s2\" , 1.0 , 0.0 )}, \"s2\" : { \"stock\" : ( \"s3\" , 1.0 , 0.0 )}, \"s3\" : { \"logout\" : ( \"s0\" , 1.0 , 1.0 )}, }, \"s0\" , { \"s0\" } ) render_target ( target ) The product MDP is: mdp = composition_mdp ( target , login_service , form_service ) render_composition_mdp ( mdp ) The optimal policy is the only one allowed opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('s0', 's0'), 's0', 'login'), Action=0 State=(('s1', 's0'), 's1', 'country'), Action=1 State=(('s1', 's0'), 's3', 'logout'), Action=0 State=(('s1', 's1'), 's2', 'stock'), Action=1 Value function: State=(('s0', 's0'), 's0', 'login'), value=2.119802268101193 State=(('s1', 's0'), 's1', 'country'), value=2.3553358534457702 State=(('s1', 's0'), 's3', 'logout'), value=2.907822041291074 State=(('s1', 's1'), 's2', 'stock'), value=2.6170398371619665 Q-value function: State=(('s0', 's0'), 's0', 'login'): Action=0, Value=2.119802268101193 State=(('s1', 's0'), 's1', 'country'): Action=1, Value=2.35533585344577 State=(('s1', 's0'), 's3', 'logout'): Action=0, Value=2.907822041291074 State=(('s1', 's1'), 's2', 'stock'): Action=1, Value=2.6170398371619665 That is, as expected, login and logout are assigned to service 0 and country and stock to service 1 . A variant of the website service Here we consider a variant in which the services can erroneously report that they can provide a service, but that leads to a dead-end. An exact solution is still possible, and the solution of the composition MDP will lead to the right orchestration. Let's define the same services, but with additional actions: login_service = build_service_from_transitions ( { \"s0\" : { \"login\" : \"s1\" }, \"s1\" : { \"logout\" : \"s0\" , \"country\" : \"error\" , \"currency\" : \"error\" , \"stock\" : \"error\" }, \"error\" : {} }, \"s0\" , { \"s0\" } ) form_service = build_service_from_transitions ( { \"s0\" : { \"login\" : \"error\" , \"logout\" : \"error\" , \"country\" : \"s1\" }, \"s1\" : { \"currency\" : \"s0\" , \"stock\" : \"s0\" }, \"error\" : {} }, \"s0\" , { \"s0\" } ) render_service ( login_service ) render_service ( form_service ) This time, the composition MDP is: mdp = composition_mdp ( target , login_service , form_service ) render_composition_mdp ( mdp ) The optimal policy correctly avoids dead ends: opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('error', 's0'), 's2', 'stock'), Action=undefined State=(('error', 's1'), 's3', 'logout'), Action=undefined State=(('s0', 'error'), 's1', 'country'), Action=undefined State=(('s0', 's0'), 's0', 'login'), Action=0 State=(('s1', 'error'), 's0', 'login'), Action=undefined State=(('s1', 's0'), 's1', 'country'), Action=1 State=(('s1', 's0'), 's3', 'logout'), Action=0 State=(('s1', 's1'), 's2', 'stock'), Action=1 Value function: State=(('error', 's0'), 's2', 'stock'), value=0.0 State=(('error', 's1'), 's3', 'logout'), value=0.0 State=(('s0', 'error'), 's1', 'country'), value=0.0 State=(('s0', 's0'), 's0', 'login'), value=2.119802268101193 State=(('s1', 'error'), 's0', 'login'), value=0.0 State=(('s1', 's0'), 's1', 'country'), value=2.3553358534457702 State=(('s1', 's0'), 's3', 'logout'), value=2.907822041291074 State=(('s1', 's1'), 's2', 'stock'), value=2.6170398371619665 Q-value function: State=(('error', 's0'), 's2', 'stock'): Action=undefined, Value=0.0 State=(('error', 's1'), 's3', 'logout'): Action=undefined, Value=0.0 State=(('s0', 'error'), 's1', 'country'): Action=undefined, Value=0.0 State=(('s0', 's0'), 's0', 'login'): Action=0, Value=2.119802268101193 Action=1, Value=0.0 State=(('s1', 'error'), 's0', 'login'): Action=undefined, Value=0.0 State=(('s1', 's0'), 's1', 'country'): Action=0, Value=0.0 Action=1, Value=2.35533585344577 State=(('s1', 's0'), 's3', 'logout'): Action=0, Value=2.907822041291074 Action=1, Value=1.0 State=(('s1', 's1'), 's2', 'stock'): Action=0, Value=0.0 Action=1, Value=2.6170398371619665 The Garden Bots System (Yadav & Sardina 2011, AAMAS) Here we consider a variant of the example described in: Yadav, N., & Sardina, S. (2011, May). Decision theoretic behavior composition. In The 10th International Conference on Autonomous Agents and Multiagent Systems -Volume 2 (pp. 575-582). :warning: NOTE: in the following, for simplicity, we don't consider - the environment and - the stochasticity of the services . In the gardening scenario, we assume there are three available garden bots: The cleaner bot BCleaner cleans the garden by collecting the fallen leaves, dirt, waste, etc., into its own bucket. Its bucket gets filled up with a cleaning session, and the bot has to empty it to be able to start cleaning again. We assume the empty action involves emptying all garden bins as well as the bots' buckets. The plucker bot BPlucker can pluck and clean the garden; since it is not equipped with a bucket, it plucks and collects from the ground directly. the multi-bot BMulti has the capability to water the plants and pluck. It has a small bucket, and so it needs to empty it after every plucking session. The desired behavior required to maintain thegarden in a particular season is not directly represented by any ofthe existing bots in the garden, and is modeled by the deterministic uniform-reward target bot TGarden shown in Figure 1. Intuitively, the garden should always be cleaned first to remove any fallen leaves and dirt, followed by either plucking or watering the garden. Since flowers and fruits do not grow everyday, the plucking is required only 30% of the time; 70% of the time a request for watering the garden will be issued. Finally, the bins are to be emptied, and the whole process can repeat again. All requests are of equal value, namely, 1 unit (second component in each transition label). print ( \"BCleaner\" ) bcleaner_service = build_service_from_transitions ( { \"a0\" : { \"clean\" : \"a1\" }, \"a1\" : { \"empty\" : \"a0\" } }, \"a0\" , { \"a0\" } ) render_service ( bcleaner_service ) BCleaner print ( \"BMulti\" ) bmulti_service = build_service_from_transitions ( { \"b0\" : { \"water\" : \"b0\" , \"pluck\" : \"b1\" }, \"b1\" : { \"water\" : \"b1\" , \"empty\" : \"b0\" } }, \"b0\" , { \"b0\" } ) render_service ( bmulti_service ) BMulti print ( \"BPlucker\" ) bplucker_service = build_service_from_transitions ( { \"c0\" : { \"pluck\" : \"c1\" }, \"c1\" : { \"clean\" : \"c0\" } }, \"c0\" , { \"c0\" } ) render_service ( bplucker_service ) BPlucker target = build_target_from_transitions ( { \"t0\" : { \"clean\" : ( \"t1\" , 1.0 , 1.0 )}, \"t1\" : { \"water\" : ( \"t2\" , 0.7 , 1.0 ), \"pluck\" : ( \"t3\" , 0.3 , 1.0 )}, \"t2\" : { \"empty\" : ( \"t0\" , 1.0 , 1.0 )}, \"t3\" : { \"empty\" : ( \"t0\" , 1.0 , 1.0 )}, }, \"t0\" , { \"t0\" } ) render_target ( target ) mdp = composition_mdp ( target , bcleaner_service , bmulti_service , bplucker_service , gamma = 0.9 ) render_composition_mdp ( mdp ) opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) _ = q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) Policy: State=(('a0', 'b0', 'c0'), 't0', 'clean'), Action=0 State=(('a0', 'b0', 'c0'), 't1', 'pluck'), Action=1 State=(('a0', 'b0', 'c0'), 't1', 'water'), Action=1 State=(('a0', 'b0', 'c0'), 't2', 'empty'), Action=undefined State=(('a0', 'b0', 'c1'), 't0', 'clean'), Action=0 State=(('a0', 'b0', 'c1'), 't3', 'empty'), Action=undefined State=(('a0', 'b1', 'c0'), 't0', 'clean'), Action=0 State=(('a0', 'b1', 'c0'), 't1', 'pluck'), Action=2 State=(('a0', 'b1', 'c0'), 't1', 'water'), Action=1 State=(('a0', 'b1', 'c0'), 't2', 'empty'), Action=1 State=(('a0', 'b1', 'c0'), 't3', 'empty'), Action=1 State=(('a0', 'b1', 'c1'), 't0', 'clean'), Action=2 State=(('a0', 'b1', 'c1'), 't3', 'empty'), Action=1 State=(('a1', 'b0', 'c0'), 't0', 'clean'), Action=undefined State=(('a1', 'b0', 'c0'), 't1', 'pluck'), Action=1 State=(('a1', 'b0', 'c0'), 't1', 'water'), Action=1 State=(('a1', 'b0', 'c0'), 't2', 'empty'), Action=0 State=(('a1', 'b0', 'c1'), 't0', 'clean'), Action=2 State=(('a1', 'b0', 'c1'), 't1', 'pluck'), Action=1 State=(('a1', 'b0', 'c1'), 't1', 'water'), Action=1 State=(('a1', 'b0', 'c1'), 't2', 'empty'), Action=0 State=(('a1', 'b0', 'c1'), 't3', 'empty'), Action=0 State=(('a1', 'b1', 'c0'), 't1', 'pluck'), Action=2 State=(('a1', 'b1', 'c0'), 't1', 'water'), Action=1 State=(('a1', 'b1', 'c0'), 't2', 'empty'), Action=0 State=(('a1', 'b1', 'c0'), 't3', 'empty'), Action=0 State=(('a1', 'b1', 'c1'), 't1', 'pluck'), Action=undefined State=(('a1', 'b1', 'c1'), 't1', 'water'), Action=1 State=(('a1', 'b1', 'c1'), 't2', 'empty'), Action=0 State=(('a1', 'b1', 'c1'), 't3', 'empty'), Action=0 print_value_function ( value_function ) Value function: State=(('a0', 'b0', 'c0'), 't0', 'clean'), value=10.000000000000005 State=(('a0', 'b0', 'c0'), 't1', 'pluck'), value=10.000000000000005 State=(('a0', 'b0', 'c0'), 't1', 'water'), value=1.0 State=(('a0', 'b0', 'c0'), 't2', 'empty'), value=0.0 State=(('a0', 'b0', 'c1'), 't0', 'clean'), value=10.000000000000005 State=(('a0', 'b0', 'c1'), 't3', 'empty'), value=0.0 State=(('a0', 'b1', 'c0'), 't0', 'clean'), value=10.000000000000004 State=(('a0', 'b1', 'c0'), 't1', 'pluck'), value=10.000000000000005 State=(('a0', 'b1', 'c0'), 't1', 'water'), value=10.000000000000005 State=(('a0', 'b1', 'c0'), 't2', 'empty'), value=10.000000000000004 State=(('a0', 'b1', 'c0'), 't3', 'empty'), value=10.000000000000004 State=(('a0', 'b1', 'c1'), 't0', 'clean'), value=10.000000000000004 State=(('a0', 'b1', 'c1'), 't3', 'empty'), value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't0', 'clean'), value=0.0 State=(('a1', 'b0', 'c0'), 't1', 'pluck'), value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't1', 'water'), value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't2', 'empty'), value=10.000000000000004 State=(('a1', 'b0', 'c1'), 't0', 'clean'), value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't1', 'pluck'), value=10.000000000000004 State=(('a1', 'b0', 'c1'), 't1', 'water'), value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't2', 'empty'), value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't3', 'empty'), value=10.000000000000005 State=(('a1', 'b1', 'c0'), 't1', 'pluck'), value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't1', 'water'), value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't2', 'empty'), value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't3', 'empty'), value=10.000000000000005 State=(('a1', 'b1', 'c1'), 't1', 'pluck'), value=0.0 State=(('a1', 'b1', 'c1'), 't1', 'water'), value=10.000000000000004 State=(('a1', 'b1', 'c1'), 't2', 'empty'), value=10.000000000000004 State=(('a1', 'b1', 'c1'), 't3', 'empty'), value=10.000000000000004 print_q_value_function ( q_value_function ) Q-value function: State=(('a0', 'b0', 'c0'), 't0', 'clean'): Action=0, Value=10.000000000000005 State=(('a0', 'b0', 'c0'), 't1', 'pluck'): Action=1, Value=10.000000000000004 Action=2, Value=1.0 State=(('a0', 'b0', 'c0'), 't1', 'water'): Action=1, Value=1.0 State=(('a0', 'b0', 'c0'), 't2', 'empty'): Action=undefined, Value=0.0 State=(('a0', 'b0', 'c1'), 't0', 'clean'): Action=0, Value=10.000000000000004 Action=2, Value=4.330000000000001 State=(('a0', 'b0', 'c1'), 't3', 'empty'): Action=undefined, Value=0.0 State=(('a0', 'b1', 'c0'), 't0', 'clean'): Action=0, Value=10.000000000000004 State=(('a0', 'b1', 'c0'), 't1', 'pluck'): Action=2, Value=10.000000000000005 State=(('a0', 'b1', 'c0'), 't1', 'water'): Action=1, Value=10.000000000000004 State=(('a0', 'b1', 'c0'), 't2', 'empty'): Action=1, Value=10.000000000000005 State=(('a0', 'b1', 'c0'), 't3', 'empty'): Action=1, Value=10.000000000000005 State=(('a0', 'b1', 'c1'), 't0', 'clean'): Action=0, Value=7.300000000000002 Action=2, Value=10.000000000000005 State=(('a0', 'b1', 'c1'), 't3', 'empty'): Action=1, Value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't0', 'clean'): Action=undefined, Value=0.0 State=(('a1', 'b0', 'c0'), 't1', 'pluck'): Action=1, Value=10.000000000000005 Action=2, Value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't1', 'water'): Action=1, Value=10.000000000000004 State=(('a1', 'b0', 'c0'), 't2', 'empty'): Action=0, Value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't0', 'clean'): Action=2, Value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't1', 'pluck'): Action=1, Value=10.000000000000004 State=(('a1', 'b0', 'c1'), 't1', 'water'): Action=1, Value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't2', 'empty'): Action=0, Value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't3', 'empty'): Action=0, Value=10.000000000000005 State=(('a1', 'b1', 'c0'), 't1', 'pluck'): Action=2, Value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't1', 'water'): Action=1, Value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't2', 'empty'): Action=0, Value=10.000000000000004 Action=1, Value=1.0 State=(('a1', 'b1', 'c0'), 't3', 'empty'): Action=0, Value=10.000000000000004 Action=1, Value=1.0 State=(('a1', 'b1', 'c1'), 't1', 'pluck'): Action=undefined, Value=0.0 State=(('a1', 'b1', 'c1'), 't1', 'water'): Action=1, Value=10.000000000000004 State=(('a1', 'b1', 'c1'), 't2', 'empty'): Action=0, Value=10.000000000000004 Action=1, Value=10.000000000000005 State=(('a1', 'b1', 'c1'), 't3', 'empty'): Action=0, Value=10.000000000000004 Action=1, Value=10.000000000000005 We start from system state (a0, b0, c0) and target state t0 . the clean action is assigned to bcleaner (action 0 ). The target takes the transition t0->t1 , and the system takes the transition (a0, b0, c0) -> (a1, b0, c0) . Now two things can happen: water with probability 0.7 and pluck with probability 0.3 . with probability 0.7 , the system needs water . The water action is assigned to bmulti (action 1 ). The target takes the transition t1->t2 , and the system takes the transition (a1, b0, c0) -> (a1, b0, c0) (same state). Then, the target requests empty , which can only be processed by bcleaner . The new target state is t0 and the new system state is (a0, b0, c0) , the initial state. with probability 0.3 , the system needs pluck . This evolution of the system is a bit more convoluted, but the orchestrator is always able to avoid dead-ends. Human-Robot Collaboration (HRC) use case We use the case study described in: Tsarouchi, P., Makris, S., & Chryssolouris, G. (2016). On a human and dual-arm robot task planning method. Procedia CIRP, 57, 551-555. Another useful reference: Wang, L., Liu, S., Liu, H., & Wang, X. V. (2020). Overview of Human-Robot Collaboration in Manufacturing. In Proceedings of 5th International Conference on the Industry 4.0 Model for Advanced Manufacturing (pp. 15-58). Springer, Cham. Consider a hybrid assembly cell for the assembly of a vehicle dashboard in the automotive industry. The cell consists of a dual arm robot and a human . For this work, some tasks can be carried out by a human and some others by the dual arm robot. The loading and assembly area are used for the picking up and the placement of the traverse (weight \\approx 12 kg \\approx 12 kg ). The fuse box is the next part to be assembled in its final position, in the traverse slot, with the help of three screws for stability reasons. The cable apck is the last part to be installed and is quite flexible. This work is a typical case for combined HR cooperation. The work load includes four processes: 1. the placement of travers 2. the placement of the computer body 3. the cable pack preparation 4. the installation These processes comprise a number of tasks and a number of suitable resources per task. The suitability of the resources for a task is decided taking into account the weight of the parts compared to the payload capabilities of the resources. Additionally, the flexibility of the parts is taken into account compared to the resource handling capabilities. print ( \"arm12\" ) arm12_service = build_service_from_transitions ( { \"s0\" : { \"pick_up_traverse\" : \"s0\" , \"place_traverse\" : \"s0\" , \"pick_up_fuse_box\" : \"s0\" , \"place_fuse_box\" : \"s0\" , \"pick_up_cable\" : \"s0\" , \"approach_table\" : \"s0\" , }, }, \"s0\" , { \"s0\" } ) render_service ( arm12_service ) arm12 print ( \"human\" ) human_service = build_service_from_transitions ( { \"s0\" : { \"pick_up_traverse\" : \"s0\" , \"place_traverse\" : \"s0\" , \"pick_up_fuse_box\" : \"s0\" , \"place_fuse_box\" : \"s0\" , \"pick_up_cable\" : \"s0\" , \"approach_table\" : \"s0\" , \"install_pins\" : \"s0\" , }, }, \"s0\" , { \"s0\" } ) render_service ( human_service ) human print ( \"arm2\" ) arm2_service = build_service_from_transitions ( { \"s0\" : { \"pick_up_screw_driver\" : \"s0\" , \"pick_up_screw\" : \"s0\" , \"install_screw\" : \"s0\" , \"place_screw_driver\" : \"s0\" , }, }, \"s0\" , { \"s0\" } ) render_service ( arm2_service ) arm2 target = build_target_from_transitions ( { \"t0\" : { \"pick_up_traverse\" : ( \"t1\" , 1.0 , 0.0 )}, \"t1\" : { \"place_traverse\" : ( \"t2\" , 1.0 , 0.0 )}, \"t2\" : { \"pick_up_fuse_box\" : ( \"t3\" , 1.0 , 0.0 )}, \"t3\" : { \"place_fuse_box\" : ( \"t4\" , 1.0 , 0.0 )}, \"t4\" : { \"pick_up_screw_driver\" : ( \"t5\" , 1.0 , 0.0 )}, \"t5\" : { \"pick_up_screw\" : ( \"t6\" , 1.0 , 0.0 )}, \"t6\" : { \"install_screw\" : ( \"t7\" , 1.0 , 0.0 )}, \"t7\" : { \"place_screw_driver\" : ( \"t8\" , 1.0 , 0.0 )}, \"t8\" : { \"pick_up_cable\" : ( \"t9\" , 1.0 , 0.0 )}, \"t9\" : { \"approach_table\" : ( \"t10\" , 1.0 , 0.0 )}, \"t10\" : { \"install_pins\" : ( \"t0\" , 1.0 , 1.0 )}, }, \"t0\" , { \"t0\" } ) render_target ( target ) mdp = composition_mdp ( target , arm12_service , human_service , arm2_service , gamma = 0.9 ) render_composition_mdp ( mdp ) opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('s0', 's0', 's0'), 't0', 'pick_up_traverse'), Action=0 State=(('s0', 's0', 's0'), 't1', 'place_traverse'), Action=0 State=(('s0', 's0', 's0'), 't10', 'install_pins'), Action=1 State=(('s0', 's0', 's0'), 't2', 'pick_up_fuse_box'), Action=0 State=(('s0', 's0', 's0'), 't3', 'place_fuse_box'), Action=0 State=(('s0', 's0', 's0'), 't4', 'pick_up_screw_driver'), Action=2 State=(('s0', 's0', 's0'), 't5', 'pick_up_screw'), Action=2 State=(('s0', 's0', 's0'), 't6', 'install_screw'), Action=2 State=(('s0', 's0', 's0'), 't7', 'place_screw_driver'), Action=2 State=(('s0', 's0', 's0'), 't8', 'pick_up_cable'), Action=0 State=(('s0', 's0', 's0'), 't9', 'approach_table'), Action=0 Value function: State=(('s0', 's0', 's0'), 't0', 'pick_up_traverse'), value=0.5081373132741243 State=(('s0', 's0', 's0'), 't1', 'place_traverse'), value=0.5645970147490269 State=(('s0', 's0', 's0'), 't10', 'install_pins'), value=1.4573235819467119 State=(('s0', 's0', 's0'), 't2', 'pick_up_fuse_box'), value=0.6273300163878076 State=(('s0', 's0', 's0'), 't3', 'place_fuse_box'), value=0.6970333515420085 State=(('s0', 's0', 's0'), 't4', 'pick_up_screw_driver'), value=0.7744815017133427 State=(('s0', 's0', 's0'), 't5', 'pick_up_screw'), value=0.860535001903714 State=(('s0', 's0', 's0'), 't6', 'install_screw'), value=0.9561500021152377 State=(('s0', 's0', 's0'), 't7', 'place_screw_driver'), value=1.062388891239153 State=(('s0', 's0', 's0'), 't8', 'pick_up_cable'), value=1.1804321013768366 State=(('s0', 's0', 's0'), 't9', 'approach_table'), value=1.3115912237520406 Q-value function: State=(('s0', 's0', 's0'), 't0', 'pick_up_traverse'): Action=0, Value=0.5081373132741243 Action=1, Value=0.5081373132741243 State=(('s0', 's0', 's0'), 't1', 'place_traverse'): Action=0, Value=0.5645970147490269 Action=1, Value=0.5645970147490269 State=(('s0', 's0', 's0'), 't10', 'install_pins'): Action=1, Value=1.4573235819467119 State=(('s0', 's0', 's0'), 't2', 'pick_up_fuse_box'): Action=0, Value=0.6273300163878077 Action=1, Value=0.6273300163878077 State=(('s0', 's0', 's0'), 't3', 'place_fuse_box'): Action=0, Value=0.6970333515420085 Action=1, Value=0.6970333515420085 State=(('s0', 's0', 's0'), 't4', 'pick_up_screw_driver'): Action=2, Value=0.7744815017133426 State=(('s0', 's0', 's0'), 't5', 'pick_up_screw'): Action=2, Value=0.8605350019037139 State=(('s0', 's0', 's0'), 't6', 'install_screw'): Action=2, Value=0.9561500021152377 State=(('s0', 's0', 's0'), 't7', 'place_screw_driver'): Action=2, Value=1.062388891239153 State=(('s0', 's0', 's0'), 't8', 'pick_up_cable'): Action=0, Value=1.1804321013768366 Action=1, Value=1.1804321013768366 State=(('s0', 's0', 's0'), 't9', 'approach_table'): Action=0, Value=1.3115912237520406 Action=1, Value=1.3115912237520406 Media room scenario (Yadav et al. 2013, IJCAI) This use case is inspired by: Yadav, N., Felli, P., De Giacomo, G., & Sardina, S. (2013, August). Supremal Realizability of Behaviors with Uncontrollable Exogenous Events. In IJCAI (pp. 1176-1182). The services of this scenario are: print ( \"projector service\" ) projector_service = build_service_from_transitions ( { \"p0\" : { \"warm_up\" : \"p1\" , \"source\" : \"p2\" , }, \"p1\" : { \"source\" : \"p3\" , \"fuse\" : \"p5\" , }, \"p2\" : { \"warm_up\" : \"p3\" , \"error\" : \"p4\" , }, \"p3\" : { \"off\" : \"p0\" , \"fuse\" : \"p5\" , }, \"p4\" : { \"reset\" : \"p0\" , }, \"p5\" : { \"repair\" : \"p0\" , }, }, \"p0\" , { \"p0\" } ) render_service ( projector_service ) projector service print ( \"audio service\" ) audio_service = build_service_from_transitions ( { \"a0\" : { \"spk_on\" : \"a1\" , }, \"a1\" : { \"spk_off\" : \"a0\" , }, }, \"a0\" , { \"a0\" } ) render_service ( audio_service ) audio service target = build_target_from_transitions ( { \"t0\" : { \"spk_on\" : ( \"t1\" , 1.0 , 0.0 )}, \"t1\" : { \"warm_up\" : ( \"t2\" , 0.5 , 0.0 ), \"source\" : ( \"t3\" , 0.5 , 0.0 )}, \"t2\" : { \"source\" : ( \"t4\" , 0.9 , 0.0 ), \"fuse\" : ( \"t6\" , 0.1 , - 1.0 )}, \"t3\" : { \"warm_up\" : ( \"t4\" , 1.0 , 0.0 )}, \"t4\" : { \"spk_off\" : ( \"t5\" , 0.9 , 0.0 ), \"fuse\" : ( \"t6\" , 0.1 , - 1.0 )}, \"t5\" : { \"off\" : ( \"t0\" , 1.0 , 1.0 )}, \"t6\" : { \"repair\" : ( \"t1\" , 1.0 , 0.0 )}, }, \"t0\" , { \"t0\" } ) render_target ( target ) mdp = composition_mdp ( target , projector_service , audio_service , gamma = 0.9 ) render_composition_mdp ( mdp ) opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('p0', 'a0'), 't0', 'spk_on'), Action=1 State=(('p0', 'a1'), 't1', 'source'), Action=0 State=(('p0', 'a1'), 't1', 'warm_up'), Action=0 State=(('p1', 'a1'), 't2', 'fuse'), Action=0 State=(('p1', 'a1'), 't2', 'source'), Action=0 State=(('p2', 'a1'), 't3', 'warm_up'), Action=0 State=(('p3', 'a0'), 't5', 'off'), Action=0 State=(('p3', 'a1'), 't4', 'fuse'), Action=0 State=(('p3', 'a1'), 't4', 'spk_off'), Action=1 State=(('p5', 'a1'), 't6', 'repair'), Action=0 Value function: State=(('p0', 'a0'), 't0', 'spk_on'), value=1.1384098283455693 State=(('p0', 'a1'), 't1', 'source'), value=1.3303096960261673 State=(('p0', 'a1'), 't1', 'warm_up'), value=1.199489922519542 State=(('p1', 'a1'), 't2', 'fuse'), value=0.02456884551101224 State=(('p1', 'a1'), 't2', 'source'), value=1.4781218844735193 State=(('p2', 'a1'), 't3', 'warm_up'), value=1.4781218844735193 State=(('p3', 'a0'), 't5', 'off'), value=2.0245688455110127 State=(('p3', 'a1'), 't4', 'fuse'), value=0.024568845511012252 State=(('p3', 'a1'), 't4', 'spk_off'), value=1.8221119609599112 State=(('p5', 'a1'), 't6', 'repair'), value=1.1384098283455693 Q-value function: State=(('p0', 'a0'), 't0', 'spk_on'): Action=1, Value=1.1384098283455693 State=(('p0', 'a1'), 't1', 'source'): Action=0, Value=1.3303096960261673 State=(('p0', 'a1'), 't1', 'warm_up'): Action=0, Value=1.1994899225195417 State=(('p1', 'a1'), 't2', 'fuse'): Action=0, Value=0.02456884551101246 State=(('p1', 'a1'), 't2', 'source'): Action=0, Value=1.4781218844735193 State=(('p2', 'a1'), 't3', 'warm_up'): Action=0, Value=1.4781218844735193 State=(('p3', 'a0'), 't5', 'off'): Action=0, Value=2.0245688455110127 State=(('p3', 'a1'), 't4', 'fuse'): Action=0, Value=0.02456884551101246 State=(('p3', 'a1'), 't4', 'spk_off'): Action=1, Value=1.8221119609599115 State=(('p5', 'a1'), 't6', 'repair'): Action=0, Value=1.1384098283455693","title":"Use Cases"},{"location":"notebooks/04-use-cases/#use-cases","text":"In this notebook, we describe different use cases for applying stochastic service composition. # Python imports, put at the top for simplicity from mdp_dp_rl.algorithms.dp.dp_analytic import DPAnalytic from docs.notebooks.utils import render_service , render_target , render_composition_mdp , print_policy_data , print_value_function , print_q_value_function from stochastic_service_composition.composition import composition_mdp from stochastic_service_composition.services import build_service_from_transitions from stochastic_service_composition.target import build_target_from_transitions","title":"Use cases"},{"location":"notebooks/04-use-cases/#simple-service-composition-website","text":"This simple example, showed in De Giacomo, G., Mecella, M., & Patrizi, F. (2014). Automated service composition based on behaviors: The roman model. In Web services foundations (pp. 189-214). Springer, New York, NY. consists of a simple website in which the user wants to login, choose the country, stock, and logout (c). We then have the login service (a) and the form service (b). The orchestrator (d) has to assign the action to the right service. This case is quite trivial as there is no competition among services since they always support different actions. The reward, in our case, is given whenever the user is able to complete the entire sequence of actions, right after the logout Let us define the service community: login_service = build_service_from_transitions ( { \"s0\" : { \"login\" : \"s1\" }, \"s1\" : { \"logout\" : \"s0\" } }, \"s0\" , { \"s0\" } ) form_service = build_service_from_transitions ( { \"s0\" : { \"country\" : \"s1\" }, \"s1\" : { \"currency\" : \"s0\" , \"stock\" : \"s0\" } }, \"s0\" , { \"s0\" } ) The login service: render_service ( login_service ) The form service: render_service ( form_service ) Now we define the target service: target = build_target_from_transitions ( { \"s0\" : { \"login\" : ( \"s1\" , 1.0 , 0.0 )}, \"s1\" : { \"country\" : ( \"s2\" , 1.0 , 0.0 )}, \"s2\" : { \"stock\" : ( \"s3\" , 1.0 , 0.0 )}, \"s3\" : { \"logout\" : ( \"s0\" , 1.0 , 1.0 )}, }, \"s0\" , { \"s0\" } ) render_target ( target ) The product MDP is: mdp = composition_mdp ( target , login_service , form_service ) render_composition_mdp ( mdp ) The optimal policy is the only one allowed opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('s0', 's0'), 's0', 'login'), Action=0 State=(('s1', 's0'), 's1', 'country'), Action=1 State=(('s1', 's0'), 's3', 'logout'), Action=0 State=(('s1', 's1'), 's2', 'stock'), Action=1 Value function: State=(('s0', 's0'), 's0', 'login'), value=2.119802268101193 State=(('s1', 's0'), 's1', 'country'), value=2.3553358534457702 State=(('s1', 's0'), 's3', 'logout'), value=2.907822041291074 State=(('s1', 's1'), 's2', 'stock'), value=2.6170398371619665 Q-value function: State=(('s0', 's0'), 's0', 'login'): Action=0, Value=2.119802268101193 State=(('s1', 's0'), 's1', 'country'): Action=1, Value=2.35533585344577 State=(('s1', 's0'), 's3', 'logout'): Action=0, Value=2.907822041291074 State=(('s1', 's1'), 's2', 'stock'): Action=1, Value=2.6170398371619665 That is, as expected, login and logout are assigned to service 0 and country and stock to service 1 .","title":"Simple service composition: Website"},{"location":"notebooks/04-use-cases/#a-variant-of-the-website-service","text":"Here we consider a variant in which the services can erroneously report that they can provide a service, but that leads to a dead-end. An exact solution is still possible, and the solution of the composition MDP will lead to the right orchestration. Let's define the same services, but with additional actions: login_service = build_service_from_transitions ( { \"s0\" : { \"login\" : \"s1\" }, \"s1\" : { \"logout\" : \"s0\" , \"country\" : \"error\" , \"currency\" : \"error\" , \"stock\" : \"error\" }, \"error\" : {} }, \"s0\" , { \"s0\" } ) form_service = build_service_from_transitions ( { \"s0\" : { \"login\" : \"error\" , \"logout\" : \"error\" , \"country\" : \"s1\" }, \"s1\" : { \"currency\" : \"s0\" , \"stock\" : \"s0\" }, \"error\" : {} }, \"s0\" , { \"s0\" } ) render_service ( login_service ) render_service ( form_service ) This time, the composition MDP is: mdp = composition_mdp ( target , login_service , form_service ) render_composition_mdp ( mdp ) The optimal policy correctly avoids dead ends: opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('error', 's0'), 's2', 'stock'), Action=undefined State=(('error', 's1'), 's3', 'logout'), Action=undefined State=(('s0', 'error'), 's1', 'country'), Action=undefined State=(('s0', 's0'), 's0', 'login'), Action=0 State=(('s1', 'error'), 's0', 'login'), Action=undefined State=(('s1', 's0'), 's1', 'country'), Action=1 State=(('s1', 's0'), 's3', 'logout'), Action=0 State=(('s1', 's1'), 's2', 'stock'), Action=1 Value function: State=(('error', 's0'), 's2', 'stock'), value=0.0 State=(('error', 's1'), 's3', 'logout'), value=0.0 State=(('s0', 'error'), 's1', 'country'), value=0.0 State=(('s0', 's0'), 's0', 'login'), value=2.119802268101193 State=(('s1', 'error'), 's0', 'login'), value=0.0 State=(('s1', 's0'), 's1', 'country'), value=2.3553358534457702 State=(('s1', 's0'), 's3', 'logout'), value=2.907822041291074 State=(('s1', 's1'), 's2', 'stock'), value=2.6170398371619665 Q-value function: State=(('error', 's0'), 's2', 'stock'): Action=undefined, Value=0.0 State=(('error', 's1'), 's3', 'logout'): Action=undefined, Value=0.0 State=(('s0', 'error'), 's1', 'country'): Action=undefined, Value=0.0 State=(('s0', 's0'), 's0', 'login'): Action=0, Value=2.119802268101193 Action=1, Value=0.0 State=(('s1', 'error'), 's0', 'login'): Action=undefined, Value=0.0 State=(('s1', 's0'), 's1', 'country'): Action=0, Value=0.0 Action=1, Value=2.35533585344577 State=(('s1', 's0'), 's3', 'logout'): Action=0, Value=2.907822041291074 Action=1, Value=1.0 State=(('s1', 's1'), 's2', 'stock'): Action=0, Value=0.0 Action=1, Value=2.6170398371619665","title":"A variant of the website service"},{"location":"notebooks/04-use-cases/#the-garden-bots-system-yadav-sardina-2011-aamas","text":"Here we consider a variant of the example described in: Yadav, N., & Sardina, S. (2011, May). Decision theoretic behavior composition. In The 10th International Conference on Autonomous Agents and Multiagent Systems -Volume 2 (pp. 575-582). :warning: NOTE: in the following, for simplicity, we don't consider - the environment and - the stochasticity of the services . In the gardening scenario, we assume there are three available garden bots: The cleaner bot BCleaner cleans the garden by collecting the fallen leaves, dirt, waste, etc., into its own bucket. Its bucket gets filled up with a cleaning session, and the bot has to empty it to be able to start cleaning again. We assume the empty action involves emptying all garden bins as well as the bots' buckets. The plucker bot BPlucker can pluck and clean the garden; since it is not equipped with a bucket, it plucks and collects from the ground directly. the multi-bot BMulti has the capability to water the plants and pluck. It has a small bucket, and so it needs to empty it after every plucking session. The desired behavior required to maintain thegarden in a particular season is not directly represented by any ofthe existing bots in the garden, and is modeled by the deterministic uniform-reward target bot TGarden shown in Figure 1. Intuitively, the garden should always be cleaned first to remove any fallen leaves and dirt, followed by either plucking or watering the garden. Since flowers and fruits do not grow everyday, the plucking is required only 30% of the time; 70% of the time a request for watering the garden will be issued. Finally, the bins are to be emptied, and the whole process can repeat again. All requests are of equal value, namely, 1 unit (second component in each transition label). print ( \"BCleaner\" ) bcleaner_service = build_service_from_transitions ( { \"a0\" : { \"clean\" : \"a1\" }, \"a1\" : { \"empty\" : \"a0\" } }, \"a0\" , { \"a0\" } ) render_service ( bcleaner_service ) BCleaner print ( \"BMulti\" ) bmulti_service = build_service_from_transitions ( { \"b0\" : { \"water\" : \"b0\" , \"pluck\" : \"b1\" }, \"b1\" : { \"water\" : \"b1\" , \"empty\" : \"b0\" } }, \"b0\" , { \"b0\" } ) render_service ( bmulti_service ) BMulti print ( \"BPlucker\" ) bplucker_service = build_service_from_transitions ( { \"c0\" : { \"pluck\" : \"c1\" }, \"c1\" : { \"clean\" : \"c0\" } }, \"c0\" , { \"c0\" } ) render_service ( bplucker_service ) BPlucker target = build_target_from_transitions ( { \"t0\" : { \"clean\" : ( \"t1\" , 1.0 , 1.0 )}, \"t1\" : { \"water\" : ( \"t2\" , 0.7 , 1.0 ), \"pluck\" : ( \"t3\" , 0.3 , 1.0 )}, \"t2\" : { \"empty\" : ( \"t0\" , 1.0 , 1.0 )}, \"t3\" : { \"empty\" : ( \"t0\" , 1.0 , 1.0 )}, }, \"t0\" , { \"t0\" } ) render_target ( target ) mdp = composition_mdp ( target , bcleaner_service , bmulti_service , bplucker_service , gamma = 0.9 ) render_composition_mdp ( mdp ) opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) _ = q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) Policy: State=(('a0', 'b0', 'c0'), 't0', 'clean'), Action=0 State=(('a0', 'b0', 'c0'), 't1', 'pluck'), Action=1 State=(('a0', 'b0', 'c0'), 't1', 'water'), Action=1 State=(('a0', 'b0', 'c0'), 't2', 'empty'), Action=undefined State=(('a0', 'b0', 'c1'), 't0', 'clean'), Action=0 State=(('a0', 'b0', 'c1'), 't3', 'empty'), Action=undefined State=(('a0', 'b1', 'c0'), 't0', 'clean'), Action=0 State=(('a0', 'b1', 'c0'), 't1', 'pluck'), Action=2 State=(('a0', 'b1', 'c0'), 't1', 'water'), Action=1 State=(('a0', 'b1', 'c0'), 't2', 'empty'), Action=1 State=(('a0', 'b1', 'c0'), 't3', 'empty'), Action=1 State=(('a0', 'b1', 'c1'), 't0', 'clean'), Action=2 State=(('a0', 'b1', 'c1'), 't3', 'empty'), Action=1 State=(('a1', 'b0', 'c0'), 't0', 'clean'), Action=undefined State=(('a1', 'b0', 'c0'), 't1', 'pluck'), Action=1 State=(('a1', 'b0', 'c0'), 't1', 'water'), Action=1 State=(('a1', 'b0', 'c0'), 't2', 'empty'), Action=0 State=(('a1', 'b0', 'c1'), 't0', 'clean'), Action=2 State=(('a1', 'b0', 'c1'), 't1', 'pluck'), Action=1 State=(('a1', 'b0', 'c1'), 't1', 'water'), Action=1 State=(('a1', 'b0', 'c1'), 't2', 'empty'), Action=0 State=(('a1', 'b0', 'c1'), 't3', 'empty'), Action=0 State=(('a1', 'b1', 'c0'), 't1', 'pluck'), Action=2 State=(('a1', 'b1', 'c0'), 't1', 'water'), Action=1 State=(('a1', 'b1', 'c0'), 't2', 'empty'), Action=0 State=(('a1', 'b1', 'c0'), 't3', 'empty'), Action=0 State=(('a1', 'b1', 'c1'), 't1', 'pluck'), Action=undefined State=(('a1', 'b1', 'c1'), 't1', 'water'), Action=1 State=(('a1', 'b1', 'c1'), 't2', 'empty'), Action=0 State=(('a1', 'b1', 'c1'), 't3', 'empty'), Action=0 print_value_function ( value_function ) Value function: State=(('a0', 'b0', 'c0'), 't0', 'clean'), value=10.000000000000005 State=(('a0', 'b0', 'c0'), 't1', 'pluck'), value=10.000000000000005 State=(('a0', 'b0', 'c0'), 't1', 'water'), value=1.0 State=(('a0', 'b0', 'c0'), 't2', 'empty'), value=0.0 State=(('a0', 'b0', 'c1'), 't0', 'clean'), value=10.000000000000005 State=(('a0', 'b0', 'c1'), 't3', 'empty'), value=0.0 State=(('a0', 'b1', 'c0'), 't0', 'clean'), value=10.000000000000004 State=(('a0', 'b1', 'c0'), 't1', 'pluck'), value=10.000000000000005 State=(('a0', 'b1', 'c0'), 't1', 'water'), value=10.000000000000005 State=(('a0', 'b1', 'c0'), 't2', 'empty'), value=10.000000000000004 State=(('a0', 'b1', 'c0'), 't3', 'empty'), value=10.000000000000004 State=(('a0', 'b1', 'c1'), 't0', 'clean'), value=10.000000000000004 State=(('a0', 'b1', 'c1'), 't3', 'empty'), value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't0', 'clean'), value=0.0 State=(('a1', 'b0', 'c0'), 't1', 'pluck'), value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't1', 'water'), value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't2', 'empty'), value=10.000000000000004 State=(('a1', 'b0', 'c1'), 't0', 'clean'), value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't1', 'pluck'), value=10.000000000000004 State=(('a1', 'b0', 'c1'), 't1', 'water'), value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't2', 'empty'), value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't3', 'empty'), value=10.000000000000005 State=(('a1', 'b1', 'c0'), 't1', 'pluck'), value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't1', 'water'), value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't2', 'empty'), value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't3', 'empty'), value=10.000000000000005 State=(('a1', 'b1', 'c1'), 't1', 'pluck'), value=0.0 State=(('a1', 'b1', 'c1'), 't1', 'water'), value=10.000000000000004 State=(('a1', 'b1', 'c1'), 't2', 'empty'), value=10.000000000000004 State=(('a1', 'b1', 'c1'), 't3', 'empty'), value=10.000000000000004 print_q_value_function ( q_value_function ) Q-value function: State=(('a0', 'b0', 'c0'), 't0', 'clean'): Action=0, Value=10.000000000000005 State=(('a0', 'b0', 'c0'), 't1', 'pluck'): Action=1, Value=10.000000000000004 Action=2, Value=1.0 State=(('a0', 'b0', 'c0'), 't1', 'water'): Action=1, Value=1.0 State=(('a0', 'b0', 'c0'), 't2', 'empty'): Action=undefined, Value=0.0 State=(('a0', 'b0', 'c1'), 't0', 'clean'): Action=0, Value=10.000000000000004 Action=2, Value=4.330000000000001 State=(('a0', 'b0', 'c1'), 't3', 'empty'): Action=undefined, Value=0.0 State=(('a0', 'b1', 'c0'), 't0', 'clean'): Action=0, Value=10.000000000000004 State=(('a0', 'b1', 'c0'), 't1', 'pluck'): Action=2, Value=10.000000000000005 State=(('a0', 'b1', 'c0'), 't1', 'water'): Action=1, Value=10.000000000000004 State=(('a0', 'b1', 'c0'), 't2', 'empty'): Action=1, Value=10.000000000000005 State=(('a0', 'b1', 'c0'), 't3', 'empty'): Action=1, Value=10.000000000000005 State=(('a0', 'b1', 'c1'), 't0', 'clean'): Action=0, Value=7.300000000000002 Action=2, Value=10.000000000000005 State=(('a0', 'b1', 'c1'), 't3', 'empty'): Action=1, Value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't0', 'clean'): Action=undefined, Value=0.0 State=(('a1', 'b0', 'c0'), 't1', 'pluck'): Action=1, Value=10.000000000000005 Action=2, Value=10.000000000000005 State=(('a1', 'b0', 'c0'), 't1', 'water'): Action=1, Value=10.000000000000004 State=(('a1', 'b0', 'c0'), 't2', 'empty'): Action=0, Value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't0', 'clean'): Action=2, Value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't1', 'pluck'): Action=1, Value=10.000000000000004 State=(('a1', 'b0', 'c1'), 't1', 'water'): Action=1, Value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't2', 'empty'): Action=0, Value=10.000000000000005 State=(('a1', 'b0', 'c1'), 't3', 'empty'): Action=0, Value=10.000000000000005 State=(('a1', 'b1', 'c0'), 't1', 'pluck'): Action=2, Value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't1', 'water'): Action=1, Value=10.000000000000004 State=(('a1', 'b1', 'c0'), 't2', 'empty'): Action=0, Value=10.000000000000004 Action=1, Value=1.0 State=(('a1', 'b1', 'c0'), 't3', 'empty'): Action=0, Value=10.000000000000004 Action=1, Value=1.0 State=(('a1', 'b1', 'c1'), 't1', 'pluck'): Action=undefined, Value=0.0 State=(('a1', 'b1', 'c1'), 't1', 'water'): Action=1, Value=10.000000000000004 State=(('a1', 'b1', 'c1'), 't2', 'empty'): Action=0, Value=10.000000000000004 Action=1, Value=10.000000000000005 State=(('a1', 'b1', 'c1'), 't3', 'empty'): Action=0, Value=10.000000000000004 Action=1, Value=10.000000000000005 We start from system state (a0, b0, c0) and target state t0 . the clean action is assigned to bcleaner (action 0 ). The target takes the transition t0->t1 , and the system takes the transition (a0, b0, c0) -> (a1, b0, c0) . Now two things can happen: water with probability 0.7 and pluck with probability 0.3 . with probability 0.7 , the system needs water . The water action is assigned to bmulti (action 1 ). The target takes the transition t1->t2 , and the system takes the transition (a1, b0, c0) -> (a1, b0, c0) (same state). Then, the target requests empty , which can only be processed by bcleaner . The new target state is t0 and the new system state is (a0, b0, c0) , the initial state. with probability 0.3 , the system needs pluck . This evolution of the system is a bit more convoluted, but the orchestrator is always able to avoid dead-ends.","title":"The Garden Bots System (Yadav &amp; Sardina 2011, AAMAS)"},{"location":"notebooks/04-use-cases/#human-robot-collaboration-hrc-use-case","text":"We use the case study described in: Tsarouchi, P., Makris, S., & Chryssolouris, G. (2016). On a human and dual-arm robot task planning method. Procedia CIRP, 57, 551-555. Another useful reference: Wang, L., Liu, S., Liu, H., & Wang, X. V. (2020). Overview of Human-Robot Collaboration in Manufacturing. In Proceedings of 5th International Conference on the Industry 4.0 Model for Advanced Manufacturing (pp. 15-58). Springer, Cham. Consider a hybrid assembly cell for the assembly of a vehicle dashboard in the automotive industry. The cell consists of a dual arm robot and a human . For this work, some tasks can be carried out by a human and some others by the dual arm robot. The loading and assembly area are used for the picking up and the placement of the traverse (weight \\approx 12 kg \\approx 12 kg ). The fuse box is the next part to be assembled in its final position, in the traverse slot, with the help of three screws for stability reasons. The cable apck is the last part to be installed and is quite flexible. This work is a typical case for combined HR cooperation. The work load includes four processes: 1. the placement of travers 2. the placement of the computer body 3. the cable pack preparation 4. the installation These processes comprise a number of tasks and a number of suitable resources per task. The suitability of the resources for a task is decided taking into account the weight of the parts compared to the payload capabilities of the resources. Additionally, the flexibility of the parts is taken into account compared to the resource handling capabilities. print ( \"arm12\" ) arm12_service = build_service_from_transitions ( { \"s0\" : { \"pick_up_traverse\" : \"s0\" , \"place_traverse\" : \"s0\" , \"pick_up_fuse_box\" : \"s0\" , \"place_fuse_box\" : \"s0\" , \"pick_up_cable\" : \"s0\" , \"approach_table\" : \"s0\" , }, }, \"s0\" , { \"s0\" } ) render_service ( arm12_service ) arm12 print ( \"human\" ) human_service = build_service_from_transitions ( { \"s0\" : { \"pick_up_traverse\" : \"s0\" , \"place_traverse\" : \"s0\" , \"pick_up_fuse_box\" : \"s0\" , \"place_fuse_box\" : \"s0\" , \"pick_up_cable\" : \"s0\" , \"approach_table\" : \"s0\" , \"install_pins\" : \"s0\" , }, }, \"s0\" , { \"s0\" } ) render_service ( human_service ) human print ( \"arm2\" ) arm2_service = build_service_from_transitions ( { \"s0\" : { \"pick_up_screw_driver\" : \"s0\" , \"pick_up_screw\" : \"s0\" , \"install_screw\" : \"s0\" , \"place_screw_driver\" : \"s0\" , }, }, \"s0\" , { \"s0\" } ) render_service ( arm2_service ) arm2 target = build_target_from_transitions ( { \"t0\" : { \"pick_up_traverse\" : ( \"t1\" , 1.0 , 0.0 )}, \"t1\" : { \"place_traverse\" : ( \"t2\" , 1.0 , 0.0 )}, \"t2\" : { \"pick_up_fuse_box\" : ( \"t3\" , 1.0 , 0.0 )}, \"t3\" : { \"place_fuse_box\" : ( \"t4\" , 1.0 , 0.0 )}, \"t4\" : { \"pick_up_screw_driver\" : ( \"t5\" , 1.0 , 0.0 )}, \"t5\" : { \"pick_up_screw\" : ( \"t6\" , 1.0 , 0.0 )}, \"t6\" : { \"install_screw\" : ( \"t7\" , 1.0 , 0.0 )}, \"t7\" : { \"place_screw_driver\" : ( \"t8\" , 1.0 , 0.0 )}, \"t8\" : { \"pick_up_cable\" : ( \"t9\" , 1.0 , 0.0 )}, \"t9\" : { \"approach_table\" : ( \"t10\" , 1.0 , 0.0 )}, \"t10\" : { \"install_pins\" : ( \"t0\" , 1.0 , 1.0 )}, }, \"t0\" , { \"t0\" } ) render_target ( target ) mdp = composition_mdp ( target , arm12_service , human_service , arm2_service , gamma = 0.9 ) render_composition_mdp ( mdp ) opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('s0', 's0', 's0'), 't0', 'pick_up_traverse'), Action=0 State=(('s0', 's0', 's0'), 't1', 'place_traverse'), Action=0 State=(('s0', 's0', 's0'), 't10', 'install_pins'), Action=1 State=(('s0', 's0', 's0'), 't2', 'pick_up_fuse_box'), Action=0 State=(('s0', 's0', 's0'), 't3', 'place_fuse_box'), Action=0 State=(('s0', 's0', 's0'), 't4', 'pick_up_screw_driver'), Action=2 State=(('s0', 's0', 's0'), 't5', 'pick_up_screw'), Action=2 State=(('s0', 's0', 's0'), 't6', 'install_screw'), Action=2 State=(('s0', 's0', 's0'), 't7', 'place_screw_driver'), Action=2 State=(('s0', 's0', 's0'), 't8', 'pick_up_cable'), Action=0 State=(('s0', 's0', 's0'), 't9', 'approach_table'), Action=0 Value function: State=(('s0', 's0', 's0'), 't0', 'pick_up_traverse'), value=0.5081373132741243 State=(('s0', 's0', 's0'), 't1', 'place_traverse'), value=0.5645970147490269 State=(('s0', 's0', 's0'), 't10', 'install_pins'), value=1.4573235819467119 State=(('s0', 's0', 's0'), 't2', 'pick_up_fuse_box'), value=0.6273300163878076 State=(('s0', 's0', 's0'), 't3', 'place_fuse_box'), value=0.6970333515420085 State=(('s0', 's0', 's0'), 't4', 'pick_up_screw_driver'), value=0.7744815017133427 State=(('s0', 's0', 's0'), 't5', 'pick_up_screw'), value=0.860535001903714 State=(('s0', 's0', 's0'), 't6', 'install_screw'), value=0.9561500021152377 State=(('s0', 's0', 's0'), 't7', 'place_screw_driver'), value=1.062388891239153 State=(('s0', 's0', 's0'), 't8', 'pick_up_cable'), value=1.1804321013768366 State=(('s0', 's0', 's0'), 't9', 'approach_table'), value=1.3115912237520406 Q-value function: State=(('s0', 's0', 's0'), 't0', 'pick_up_traverse'): Action=0, Value=0.5081373132741243 Action=1, Value=0.5081373132741243 State=(('s0', 's0', 's0'), 't1', 'place_traverse'): Action=0, Value=0.5645970147490269 Action=1, Value=0.5645970147490269 State=(('s0', 's0', 's0'), 't10', 'install_pins'): Action=1, Value=1.4573235819467119 State=(('s0', 's0', 's0'), 't2', 'pick_up_fuse_box'): Action=0, Value=0.6273300163878077 Action=1, Value=0.6273300163878077 State=(('s0', 's0', 's0'), 't3', 'place_fuse_box'): Action=0, Value=0.6970333515420085 Action=1, Value=0.6970333515420085 State=(('s0', 's0', 's0'), 't4', 'pick_up_screw_driver'): Action=2, Value=0.7744815017133426 State=(('s0', 's0', 's0'), 't5', 'pick_up_screw'): Action=2, Value=0.8605350019037139 State=(('s0', 's0', 's0'), 't6', 'install_screw'): Action=2, Value=0.9561500021152377 State=(('s0', 's0', 's0'), 't7', 'place_screw_driver'): Action=2, Value=1.062388891239153 State=(('s0', 's0', 's0'), 't8', 'pick_up_cable'): Action=0, Value=1.1804321013768366 Action=1, Value=1.1804321013768366 State=(('s0', 's0', 's0'), 't9', 'approach_table'): Action=0, Value=1.3115912237520406 Action=1, Value=1.3115912237520406","title":"Human-Robot Collaboration (HRC) use case"},{"location":"notebooks/04-use-cases/#media-room-scenario-yadav-et-al-2013-ijcai","text":"This use case is inspired by: Yadav, N., Felli, P., De Giacomo, G., & Sardina, S. (2013, August). Supremal Realizability of Behaviors with Uncontrollable Exogenous Events. In IJCAI (pp. 1176-1182). The services of this scenario are: print ( \"projector service\" ) projector_service = build_service_from_transitions ( { \"p0\" : { \"warm_up\" : \"p1\" , \"source\" : \"p2\" , }, \"p1\" : { \"source\" : \"p3\" , \"fuse\" : \"p5\" , }, \"p2\" : { \"warm_up\" : \"p3\" , \"error\" : \"p4\" , }, \"p3\" : { \"off\" : \"p0\" , \"fuse\" : \"p5\" , }, \"p4\" : { \"reset\" : \"p0\" , }, \"p5\" : { \"repair\" : \"p0\" , }, }, \"p0\" , { \"p0\" } ) render_service ( projector_service ) projector service print ( \"audio service\" ) audio_service = build_service_from_transitions ( { \"a0\" : { \"spk_on\" : \"a1\" , }, \"a1\" : { \"spk_off\" : \"a0\" , }, }, \"a0\" , { \"a0\" } ) render_service ( audio_service ) audio service target = build_target_from_transitions ( { \"t0\" : { \"spk_on\" : ( \"t1\" , 1.0 , 0.0 )}, \"t1\" : { \"warm_up\" : ( \"t2\" , 0.5 , 0.0 ), \"source\" : ( \"t3\" , 0.5 , 0.0 )}, \"t2\" : { \"source\" : ( \"t4\" , 0.9 , 0.0 ), \"fuse\" : ( \"t6\" , 0.1 , - 1.0 )}, \"t3\" : { \"warm_up\" : ( \"t4\" , 1.0 , 0.0 )}, \"t4\" : { \"spk_off\" : ( \"t5\" , 0.9 , 0.0 ), \"fuse\" : ( \"t6\" , 0.1 , - 1.0 )}, \"t5\" : { \"off\" : ( \"t0\" , 1.0 , 1.0 )}, \"t6\" : { \"repair\" : ( \"t1\" , 1.0 , 0.0 )}, }, \"t0\" , { \"t0\" } ) render_target ( target ) mdp = composition_mdp ( target , projector_service , audio_service , gamma = 0.9 ) render_composition_mdp ( mdp ) opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('p0', 'a0'), 't0', 'spk_on'), Action=1 State=(('p0', 'a1'), 't1', 'source'), Action=0 State=(('p0', 'a1'), 't1', 'warm_up'), Action=0 State=(('p1', 'a1'), 't2', 'fuse'), Action=0 State=(('p1', 'a1'), 't2', 'source'), Action=0 State=(('p2', 'a1'), 't3', 'warm_up'), Action=0 State=(('p3', 'a0'), 't5', 'off'), Action=0 State=(('p3', 'a1'), 't4', 'fuse'), Action=0 State=(('p3', 'a1'), 't4', 'spk_off'), Action=1 State=(('p5', 'a1'), 't6', 'repair'), Action=0 Value function: State=(('p0', 'a0'), 't0', 'spk_on'), value=1.1384098283455693 State=(('p0', 'a1'), 't1', 'source'), value=1.3303096960261673 State=(('p0', 'a1'), 't1', 'warm_up'), value=1.199489922519542 State=(('p1', 'a1'), 't2', 'fuse'), value=0.02456884551101224 State=(('p1', 'a1'), 't2', 'source'), value=1.4781218844735193 State=(('p2', 'a1'), 't3', 'warm_up'), value=1.4781218844735193 State=(('p3', 'a0'), 't5', 'off'), value=2.0245688455110127 State=(('p3', 'a1'), 't4', 'fuse'), value=0.024568845511012252 State=(('p3', 'a1'), 't4', 'spk_off'), value=1.8221119609599112 State=(('p5', 'a1'), 't6', 'repair'), value=1.1384098283455693 Q-value function: State=(('p0', 'a0'), 't0', 'spk_on'): Action=1, Value=1.1384098283455693 State=(('p0', 'a1'), 't1', 'source'): Action=0, Value=1.3303096960261673 State=(('p0', 'a1'), 't1', 'warm_up'): Action=0, Value=1.1994899225195417 State=(('p1', 'a1'), 't2', 'fuse'): Action=0, Value=0.02456884551101246 State=(('p1', 'a1'), 't2', 'source'): Action=0, Value=1.4781218844735193 State=(('p2', 'a1'), 't3', 'warm_up'): Action=0, Value=1.4781218844735193 State=(('p3', 'a0'), 't5', 'off'): Action=0, Value=2.0245688455110127 State=(('p3', 'a1'), 't4', 'fuse'): Action=0, Value=0.02456884551101246 State=(('p3', 'a1'), 't4', 'spk_off'): Action=1, Value=1.8221119609599115 State=(('p5', 'a1'), 't6', 'repair'): Action=0, Value=1.1384098283455693","title":"Media room scenario (Yadav et al. 2013, IJCAI)"},{"location":"notebooks/composition-mdp-smaller/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Composition MDP (temporary) This is a smaller part of the original scenario (see here) from mdp_dp_rl.algorithms.dp.dp_analytic import DPAnalytic from docs.notebooks.utils import render_target , render_service , render_composition_mdp , print_policy_data , \\ print_value_function , print_q_value_function from stochastic_service_composition.composition import composition_mdp from stochastic_service_composition.services import Service , build_system_service , build_service_from_transitions from stochastic_service_composition.target import build_target_from_transitions , Target def build_target_service () -> Target : \"\"\"Build the target service.\"\"\" transition_function = { \"t0\" : { \"hot_air_on\" : ( \"t1\" , 0.6 , 5 ), \"move_to_kitchen\" : ( \"t2\" , 0.4 , 3 ), }, \"t1\" : { \"hot_air_off\" : ( \"t0\" , 0.5 , 4 ), \"hot_air_on\" : ( \"t1\" , 0.5 , 2 )}, \"t2\" : { \"move_to_bathroom\" : ( \"t0\" , 0.7 , 3 ), \"move_to_kitchen\" : ( \"t2\" , 0.3 , 3 ), }, } initial_state = \"t0\" final_states = { \"t0\" } return build_target_from_transitions ( transition_function , initial_state , final_states ) target_service = build_target_service () render_target ( target_service ) Service community def bathroom_heating_device () -> Service : \"\"\"Build the bathroom heating device.\"\"\" transitions = { \"air_cold\" : { \"cold_air_on\" : \"air_cold\" , \"air_off\" : \"air_off\" , }, \"air_off\" : { \"cold_air_on\" : \"air_cold\" , \"hot_air_on\" : \"air_hot\" , }, \"air_hot\" : { \"hot_air_on\" : \"air_hot\" , \"air_off\" : \"air_off\" }, } final_states = { \"air_off\" } initial_state = \"air_off\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def user_behaviour () -> Service : \"\"\"It is the user behaviour service.\"\"\" transitions = { \"bathroom\" : { \"move_to_bathroom\" : \"bathroom\" , \"move_to_kitchen\" : \"kitchen\" , }, \"kitchen\" : { \"move_to_bathroom\" : \"bathroom\" , \"move_to_kitchen\" : \"kitchen\" , }, } initial_state = \"bathroom\" final_states = { \"bathroom\" } return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore bathroom_heating_service = bathroom_heating_device () user_behaviour = user_behaviour () all_services = [ bathroom_heating_service , user_behaviour ] system_service = build_system_service ( * all_services ) render_service ( system_service ) Compute the composition MDP mdp = composition_mdp ( target_service , * all_services ) render_composition_mdp ( mdp ) print ( f \"Number of states: { len ( mdp . all_states ) } \" ) print ( \"Transitions:\" ) for state , transitions in mdp . transitions . items (): for action , next_states in transitions . items (): for next_state , prob in next_states . items (): print ( state , action , next_state , prob ) Number of states: 7 Transitions: 0 initial (('air_off', 'bathroom'), 't0', 'hot_air_on') 0.6 0 initial (('air_off', 'bathroom'), 't0', 'move_to_kitchen') 0.4 (('air_off', 'bathroom'), 't0', 'hot_air_on') 0 (('air_hot', 'bathroom'), 't1', 'hot_air_off') 0.5 (('air_off', 'bathroom'), 't0', 'hot_air_on') 0 (('air_hot', 'bathroom'), 't1', 'hot_air_on') 0.5 (('air_off', 'bathroom'), 't0', 'move_to_kitchen') 1 (('air_off', 'kitchen'), 't2', 'move_to_bathroom') 0.7 (('air_off', 'bathroom'), 't0', 'move_to_kitchen') 1 (('air_off', 'kitchen'), 't2', 'move_to_kitchen') 0.3 (('air_hot', 'bathroom'), 't1', 'hot_air_off') undefined (('air_hot', 'bathroom'), 't1', 'hot_air_off') 1.0 (('air_hot', 'bathroom'), 't1', 'hot_air_on') 0 (('air_hot', 'bathroom'), 't1', 'hot_air_off') 0.5 (('air_hot', 'bathroom'), 't1', 'hot_air_on') 0 (('air_hot', 'bathroom'), 't1', 'hot_air_on') 0.5 (('air_off', 'kitchen'), 't2', 'move_to_bathroom') 1 (('air_off', 'bathroom'), 't0', 'hot_air_on') 0.6 (('air_off', 'kitchen'), 't2', 'move_to_bathroom') 1 (('air_off', 'bathroom'), 't0', 'move_to_kitchen') 0.4 (('air_off', 'kitchen'), 't2', 'move_to_kitchen') 1 (('air_off', 'kitchen'), 't2', 'move_to_bathroom') 0.7 (('air_off', 'kitchen'), 't2', 'move_to_kitchen') 1 (('air_off', 'kitchen'), 't2', 'move_to_kitchen') 0.3 The optimal policy is: opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('air_hot', 'bathroom'), 't1', 'hot_air_off'), Action=undefined State=(('air_hot', 'bathroom'), 't1', 'hot_air_on'), Action=0 State=(('air_off', 'bathroom'), 't0', 'hot_air_on'), Action=0 State=(('air_off', 'bathroom'), 't0', 'move_to_kitchen'), Action=1 State=(('air_off', 'kitchen'), 't2', 'move_to_bathroom'), Action=1 State=(('air_off', 'kitchen'), 't2', 'move_to_kitchen'), Action=1 Value function: State=(('air_hot', 'bathroom'), 't1', 'hot_air_off'), value=0.0 State=(('air_hot', 'bathroom'), 't1', 'hot_air_on'), value=3.6363636363636362 State=(('air_off', 'bathroom'), 't0', 'hot_air_on'), value=6.636363636363637 State=(('air_off', 'bathroom'), 't0', 'move_to_kitchen'), value=14.20447318976731 State=(('air_off', 'kitchen'), 't2', 'move_to_bathroom'), value=11.697246711952596 State=(('air_off', 'kitchen'), 't2', 'move_to_kitchen'), value=14.20447318976731 Q-value function: State=(('air_hot', 'bathroom'), 't1', 'hot_air_off'): Action=undefined, Value=0.0 State=(('air_hot', 'bathroom'), 't1', 'hot_air_on'): Action=0, Value=3.6363636363636362 State=(('air_off', 'bathroom'), 't0', 'hot_air_on'): Action=0, Value=6.636363636363637 State=(('air_off', 'bathroom'), 't0', 'move_to_kitchen'): Action=1, Value=14.204473189767308 State=(('air_off', 'kitchen'), 't2', 'move_to_bathroom'): Action=1, Value=11.697246711952596 State=(('air_off', 'kitchen'), 't2', 'move_to_kitchen'): Action=1, Value=14.204473189767308","title":"Composition MDP (temporary)"},{"location":"notebooks/composition-mdp-smaller/#composition-mdp-temporary","text":"This is a smaller part of the original scenario (see here) from mdp_dp_rl.algorithms.dp.dp_analytic import DPAnalytic from docs.notebooks.utils import render_target , render_service , render_composition_mdp , print_policy_data , \\ print_value_function , print_q_value_function from stochastic_service_composition.composition import composition_mdp from stochastic_service_composition.services import Service , build_system_service , build_service_from_transitions from stochastic_service_composition.target import build_target_from_transitions , Target def build_target_service () -> Target : \"\"\"Build the target service.\"\"\" transition_function = { \"t0\" : { \"hot_air_on\" : ( \"t1\" , 0.6 , 5 ), \"move_to_kitchen\" : ( \"t2\" , 0.4 , 3 ), }, \"t1\" : { \"hot_air_off\" : ( \"t0\" , 0.5 , 4 ), \"hot_air_on\" : ( \"t1\" , 0.5 , 2 )}, \"t2\" : { \"move_to_bathroom\" : ( \"t0\" , 0.7 , 3 ), \"move_to_kitchen\" : ( \"t2\" , 0.3 , 3 ), }, } initial_state = \"t0\" final_states = { \"t0\" } return build_target_from_transitions ( transition_function , initial_state , final_states ) target_service = build_target_service () render_target ( target_service )","title":"Composition MDP (temporary)"},{"location":"notebooks/composition-mdp-smaller/#service-community","text":"def bathroom_heating_device () -> Service : \"\"\"Build the bathroom heating device.\"\"\" transitions = { \"air_cold\" : { \"cold_air_on\" : \"air_cold\" , \"air_off\" : \"air_off\" , }, \"air_off\" : { \"cold_air_on\" : \"air_cold\" , \"hot_air_on\" : \"air_hot\" , }, \"air_hot\" : { \"hot_air_on\" : \"air_hot\" , \"air_off\" : \"air_off\" }, } final_states = { \"air_off\" } initial_state = \"air_off\" return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore def user_behaviour () -> Service : \"\"\"It is the user behaviour service.\"\"\" transitions = { \"bathroom\" : { \"move_to_bathroom\" : \"bathroom\" , \"move_to_kitchen\" : \"kitchen\" , }, \"kitchen\" : { \"move_to_bathroom\" : \"bathroom\" , \"move_to_kitchen\" : \"kitchen\" , }, } initial_state = \"bathroom\" final_states = { \"bathroom\" } return build_service_from_transitions ( transitions , initial_state , final_states ) # type: ignore bathroom_heating_service = bathroom_heating_device () user_behaviour = user_behaviour () all_services = [ bathroom_heating_service , user_behaviour ] system_service = build_system_service ( * all_services ) render_service ( system_service )","title":"Service community"},{"location":"notebooks/composition-mdp-smaller/#compute-the-composition-mdp","text":"mdp = composition_mdp ( target_service , * all_services ) render_composition_mdp ( mdp ) print ( f \"Number of states: { len ( mdp . all_states ) } \" ) print ( \"Transitions:\" ) for state , transitions in mdp . transitions . items (): for action , next_states in transitions . items (): for next_state , prob in next_states . items (): print ( state , action , next_state , prob ) Number of states: 7 Transitions: 0 initial (('air_off', 'bathroom'), 't0', 'hot_air_on') 0.6 0 initial (('air_off', 'bathroom'), 't0', 'move_to_kitchen') 0.4 (('air_off', 'bathroom'), 't0', 'hot_air_on') 0 (('air_hot', 'bathroom'), 't1', 'hot_air_off') 0.5 (('air_off', 'bathroom'), 't0', 'hot_air_on') 0 (('air_hot', 'bathroom'), 't1', 'hot_air_on') 0.5 (('air_off', 'bathroom'), 't0', 'move_to_kitchen') 1 (('air_off', 'kitchen'), 't2', 'move_to_bathroom') 0.7 (('air_off', 'bathroom'), 't0', 'move_to_kitchen') 1 (('air_off', 'kitchen'), 't2', 'move_to_kitchen') 0.3 (('air_hot', 'bathroom'), 't1', 'hot_air_off') undefined (('air_hot', 'bathroom'), 't1', 'hot_air_off') 1.0 (('air_hot', 'bathroom'), 't1', 'hot_air_on') 0 (('air_hot', 'bathroom'), 't1', 'hot_air_off') 0.5 (('air_hot', 'bathroom'), 't1', 'hot_air_on') 0 (('air_hot', 'bathroom'), 't1', 'hot_air_on') 0.5 (('air_off', 'kitchen'), 't2', 'move_to_bathroom') 1 (('air_off', 'bathroom'), 't0', 'hot_air_on') 0.6 (('air_off', 'kitchen'), 't2', 'move_to_bathroom') 1 (('air_off', 'bathroom'), 't0', 'move_to_kitchen') 0.4 (('air_off', 'kitchen'), 't2', 'move_to_kitchen') 1 (('air_off', 'kitchen'), 't2', 'move_to_bathroom') 0.7 (('air_off', 'kitchen'), 't2', 'move_to_kitchen') 1 (('air_off', 'kitchen'), 't2', 'move_to_kitchen') 0.3 The optimal policy is: opn = DPAnalytic ( mdp , 1e-4 ) opt_policy = opn . get_optimal_policy_vi () value_function = opn . get_value_func_dict ( opt_policy ) q_value_function = opn . get_act_value_func_dict ( opt_policy ) # remove '0' state to sort output opt_policy . policy_data . pop ( 0 , None ) value_function . pop ( 0 , None ) q_value_function . pop ( 0 , None ) print_policy_data ( opt_policy ) print () print_value_function ( value_function ) print () print_q_value_function ( q_value_function ) Policy: State=(('air_hot', 'bathroom'), 't1', 'hot_air_off'), Action=undefined State=(('air_hot', 'bathroom'), 't1', 'hot_air_on'), Action=0 State=(('air_off', 'bathroom'), 't0', 'hot_air_on'), Action=0 State=(('air_off', 'bathroom'), 't0', 'move_to_kitchen'), Action=1 State=(('air_off', 'kitchen'), 't2', 'move_to_bathroom'), Action=1 State=(('air_off', 'kitchen'), 't2', 'move_to_kitchen'), Action=1 Value function: State=(('air_hot', 'bathroom'), 't1', 'hot_air_off'), value=0.0 State=(('air_hot', 'bathroom'), 't1', 'hot_air_on'), value=3.6363636363636362 State=(('air_off', 'bathroom'), 't0', 'hot_air_on'), value=6.636363636363637 State=(('air_off', 'bathroom'), 't0', 'move_to_kitchen'), value=14.20447318976731 State=(('air_off', 'kitchen'), 't2', 'move_to_bathroom'), value=11.697246711952596 State=(('air_off', 'kitchen'), 't2', 'move_to_kitchen'), value=14.20447318976731 Q-value function: State=(('air_hot', 'bathroom'), 't1', 'hot_air_off'): Action=undefined, Value=0.0 State=(('air_hot', 'bathroom'), 't1', 'hot_air_on'): Action=0, Value=3.6363636363636362 State=(('air_off', 'bathroom'), 't0', 'hot_air_on'): Action=0, Value=6.636363636363637 State=(('air_off', 'bathroom'), 't0', 'move_to_kitchen'): Action=1, Value=14.204473189767308 State=(('air_off', 'kitchen'), 't2', 'move_to_bathroom'): Action=1, Value=11.697246711952596 State=(('air_off', 'kitchen'), 't2', 'move_to_kitchen'): Action=1, Value=14.204473189767308","title":"Compute the composition MDP"}]}